// Generated by SolidPython 1.1.3 on 2024-10-24 21:15:46


intersection() {
	union() {
		difference() {
			polyhedron(convexity = 10, faces = [[80, 79, 78], [80, 78, 81], [80, 81, 82], [79, 57, 55], [79, 55, 89], [79, 89, 91], [79, 91, 78], [89, 55, 56], [89, 56, 35], [89, 35, 38], [89, 38, 90], [39, 38, 35], [39, 35, 36], [39, 36, 37], [83, 81, 78], [83, 78, 91], [83, 91, 92], [83, 92, 87], [100, 92, 91], [100, 91, 89], [100, 89, 90], [100, 90, 98], [169, 98, 90], [169, 90, 38], [169, 38, 39], [169, 39, 164], [100, 99, 31], [100, 31, 88], [100, 88, 87], [100, 87, 92], [98, 169, 168], [98, 168, 97], [98, 97, 99], [98, 99, 100], [97, 40, 0], [97, 0, 31], [97, 31, 99], [164, 39, 37], [164, 37, 115], [164, 115, 116], [164, 116, 165], [120, 45, 10], [120, 10, 166], [120, 166, 165], [120, 165, 116], [45, 44, 8], [45, 8, 9], [45, 9, 10], [167, 168, 169], [167, 169, 164], [167, 164, 165], [167, 165, 166], [166, 10, 9], [166, 9, 104], [166, 104, 105], [166, 105, 167], [167, 105, 106], [167, 106, 40], [167, 40, 97], [167, 97, 168], [138, 42, 41], [138, 41, 43], [138, 43, 137], [139, 138, 137], [139, 137, 136], [139, 136, 143], [139, 143, 142], [144, 145, 141], [144, 141, 140], [144, 140, 142], [144, 142, 143], [141, 145, 50], [141, 50, 151], [141, 151, 147], [138, 139, 49], [138, 49, 2], [138, 2, 13], [138, 13, 42], [130, 133, 49], [130, 49, 139], [130, 139, 142], [130, 142, 140], [147, 146, 131], [147, 131, 130], [147, 130, 140], [147, 140, 141], [27, 26, 2], [27, 2, 49], [27, 49, 133], [27, 133, 132], [132, 133, 130], [132, 130, 131], [132, 131, 134], [132, 134, 135], [135, 47, 25], [135, 25, 27], [135, 27, 132], [111, 114, 46], [111, 46, 121], [111, 121, 122], [122, 123, 108], [122, 108, 107], [122, 107, 112], [122, 112, 111], [107, 108, 30], [107, 30, 50], [107, 50, 145], [107, 145, 144], [111, 112, 109], [111, 109, 110], [111, 110, 113], [111, 113, 114], [109, 112, 107], [109, 107, 144], [109, 144, 143], [109, 143, 136], [136, 137, 43], [136, 43, 15], [136, 15, 110], [136, 110, 109], [154, 82, 81], [154, 81, 83], [154, 83, 86], [154, 86, 155], [84, 86, 83], [84, 83, 87], [84, 87, 88], [84, 88, 85], [88, 31, 0], [88, 0, 1], [88, 1, 18], [88, 18, 85], [155, 86, 84], [155, 84, 17], [155, 17, 51], [155, 51, 157], [20, 21, 17], [20, 17, 84], [20, 84, 85], [20, 85, 18], [53, 51, 17], [53, 17, 21], [53, 21, 24], [42, 13, 14], [42, 14, 11], [42, 11, 12], [42, 12, 41], [14, 13, 2], [14, 2, 26], [14, 26, 52], [14, 52, 54], [26, 27, 25], [26, 25, 153], [26, 153, 156], [26, 156, 52], [24, 23, 11], [24, 11, 14], [24, 14, 54], [24, 54, 53], [52, 156, 157], [52, 157, 51], [52, 51, 53], [52, 53, 54], [156, 153, 152], [156, 152, 154], [156, 154, 155], [156, 155, 157], [125, 152, 153], [125, 153, 25], [125, 25, 47], [125, 47, 129], [152, 125, 124], [152, 124, 80], [152, 80, 82], [152, 82, 154], [126, 58, 57], [126, 57, 79], [126, 79, 80], [126, 80, 124], [127, 126, 124], [127, 124, 125], [127, 125, 129], [127, 129, 128], [48, 128, 129], [48, 129, 47], [48, 47, 135], [48, 135, 134], [65, 59, 58], [65, 58, 126], [65, 126, 127], [65, 127, 61], [128, 48, 16], [128, 16, 63], [128, 63, 61], [128, 61, 127], [64, 65, 61], [64, 61, 63], [64, 63, 62], [68, 60, 59], [68, 59, 65], [68, 65, 64], [68, 64, 67], [66, 36, 35], [66, 35, 56], [66, 56, 60], [66, 60, 68], [59, 60, 56], [59, 56, 55], [59, 55, 57], [59, 57, 58], [29, 62, 63], [29, 63, 16], [29, 16, 148], [29, 148, 149], [131, 146, 148], [131, 148, 16], [131, 16, 48], [131, 48, 134], [149, 148, 146], [149, 146, 147], [149, 147, 151], [149, 151, 150], [175, 160, 159], [175, 159, 8], [175, 8, 44], [175, 44, 176], [177, 121, 46], [177, 46, 161], [177, 161, 160], [177, 160, 175], [104, 9, 8], [104, 8, 159], [104, 159, 158], [104, 158, 102], [162, 163, 158], [162, 158, 159], [162, 159, 160], [162, 160, 161], [94, 162, 161], [94, 161, 46], [94, 46, 114], [94, 114, 113], [163, 93, 34], [163, 34, 101], [163, 101, 102], [163, 102, 158], [95, 96, 93], [95, 93, 163], [95, 163, 162], [95, 162, 94], [93, 96, 32], [93, 32, 33], [93, 33, 34], [101, 34, 33], [101, 33, 6], [101, 6, 7], [101, 7, 103], [103, 7, 1], [103, 1, 0], [103, 0, 40], [103, 40, 106], [104, 102, 101], [104, 101, 103], [104, 103, 106], [104, 106, 105], [96, 95, 3], [96, 3, 5], [96, 5, 4], [96, 4, 32], [113, 110, 15], [113, 15, 3], [113, 3, 95], [113, 95, 94], [41, 12, 5], [41, 5, 3], [41, 3, 15], [41, 15, 43], [6, 33, 32], [6, 32, 4], [6, 4, 22], [6, 22, 19], [21, 20, 19], [21, 19, 22], [21, 22, 23], [21, 23, 24], [20, 18, 1], [20, 1, 7], [20, 7, 6], [20, 6, 19], [11, 23, 22], [11, 22, 4], [11, 4, 5], [11, 5, 12], [150, 151, 50], [150, 50, 30], [150, 30, 74], [150, 74, 75], [173, 74, 30], [173, 30, 108], [173, 108, 123], [173, 123, 171], [123, 122, 121], [123, 121, 177], [123, 177, 178], [123, 178, 171], [76, 77, 75], [76, 75, 74], [76, 74, 173], [76, 173, 172], [171, 178, 179], [171, 179, 170], [171, 170, 172], [171, 172, 173], [172, 170, 28], [172, 28, 72], [172, 72, 76], [174, 119, 118], [174, 118, 28], [174, 28, 170], [174, 170, 179], [175, 176, 174], [175, 174, 179], [175, 179, 178], [175, 178, 177], [119, 174, 176], [119, 176, 44], [119, 44, 45], [119, 45, 120], [120, 116, 115], [120, 115, 117], [120, 117, 118], [120, 118, 119], [115, 37, 36], [115, 36, 66], [115, 66, 69], [115, 69, 117], [73, 72, 28], [73, 28, 118], [73, 118, 117], [73, 117, 69], [71, 73, 69], [71, 69, 66], [71, 66, 68], [71, 68, 67], [67, 64, 62], [67, 62, 29], [67, 29, 70], [67, 70, 71], [72, 73, 71], [72, 71, 70], [72, 70, 77], [72, 77, 76], [75, 77, 70], [75, 70, 29], [75, 29, 149], [75, 149, 150]], points = [[ 1.65926751e-15,-1.00037184e+01, 4.87696024e+01],
			 [-2.65484210e-14,-1.96657981e+01, 4.58081761e+01],
			 [-2.66057335e+01,-3.66196506e+01,-2.06772390e+01],
			 [ 2.02798675e+01,-4.53264581e+01,-3.26362385e+00],
			 [ 1.05489589e+01,-4.63393261e+01, 1.50505462e+01],
			 [ 1.02354662e+01,-4.85900820e+01, 3.26362385e+00],
			 [ 1.05489589e+01,-3.41851944e+01, 3.47163444e+01],
			 [ 1.02354662e+01,-2.46492192e+01, 4.20007536e+01],
			 [ 4.57407373e+01, 4.85834807e+00, 1.90454695e+01],
			 [ 3.98606991e+01, 6.76888827e+00, 2.90491879e+01],
			 [ 3.62266357e+01, 1.79533855e+01, 2.90491879e+01],
			 [-1.02354662e+01,-4.85900820e+01, 3.26362385e+00],
			 [ 0.00000000e+00,-4.97668906e+01,-2.89641458e+00],
			 [-1.87032855e+01,-4.36898248e+01,-1.50505462e+01],
			 [-2.02798675e+01,-4.53264581e+01,-3.26362385e+00],
			 [ 1.87032855e+01,-4.36898248e+01,-1.50505462e+01],
			 [-2.92522443e+01, 2.05964621e+01,-3.47163444e+01],
			 [-2.82693303e+01,-2.89056767e+01, 2.90491879e+01],
			 [-1.02354662e+01,-2.46492192e+01, 4.20007536e+01],
			 [ 2.90640588e-14,-3.87371297e+01, 3.12385476e+01],
			 [-1.05489589e+01,-3.41851944e+01, 3.47163444e+01],
			 [-1.87552287e+01,-3.58180762e+01, 2.90491879e+01],
			 [ 0.00000000e+00,-4.52643774e+01, 2.06772390e+01],
			 [-1.05489589e+01,-4.63393261e+01, 1.50505462e+01],
			 [-1.87552287e+01,-4.20007141e+01, 1.90454695e+01],
			 [-4.57407373e+01,-1.48620665e+01,-1.28628315e+01],
			 [-3.57718595e+01,-3.12887798e+01,-1.50505462e+01],
			 [-3.98606991e+01,-2.29552447e+01,-1.90454695e+01],
			 [ 2.82693303e+01, 3.89093951e+01,-1.28628315e+01],
			 [-1.05489589e+01, 3.41851944e+01,-3.47163444e+01],
			 [ 1.87032855e+01, 6.07706583e+00,-4.58081761e+01],
			 [-9.51410157e+00,-3.09131899e+00, 4.87696024e+01],
			 [ 1.87552287e+01,-4.20007141e+01, 1.90454695e+01],
			 [ 1.87552287e+01,-3.58180762e+01, 2.90491879e+01],
			 [ 2.82693303e+01,-2.89056767e+01, 2.90491879e+01],
			 [-9.51410157e+00, 4.50033384e+01, 1.90454695e+01],
			 [ 5.30965603e-14, 4.80946574e+01, 1.28628315e+01],
			 [ 9.51410157e+00, 4.50033384e+01, 1.90454695e+01],
			 [-5.88003814e+00, 4.00014792e+01, 2.90491879e+01],
			 [ 5.88003814e+00, 4.00014792e+01, 2.90491879e+01],
			 [ 9.51410157e+00,-3.09131899e+00, 4.87696024e+01],
			 [ 0.00000000e+00,-4.80946574e+01,-1.28628315e+01],
			 [-9.51410157e+00,-4.50033384e+01,-1.90454695e+01],
			 [ 9.51410157e+00,-4.50033384e+01,-1.90454695e+01],
			 [ 4.57407373e+01, 1.48620665e+01, 1.28628315e+01],
			 [ 3.98606991e+01, 2.29552447e+01, 1.90454695e+01],
			 [ 4.57407373e+01,-1.48620665e+01,-1.28628315e+01],
			 [-4.57407373e+01,-4.85834807e+00,-1.90454695e+01],
			 [-3.68411997e+01, 1.19704314e+01,-3.12385476e+01],
			 [-2.27691136e+01,-3.13389963e+01,-3.12385476e+01],
			 [ 9.51410157e+00, 3.09131899e+00,-4.87696024e+01],
			 [-3.41493685e+01,-3.08162170e+01, 1.90454695e+01],
			 [-3.68411997e+01,-3.32939460e+01,-3.26362385e+00],
			 [-2.82693303e+01,-3.89093951e+01, 1.28628315e+01],
			 [-2.92522443e+01,-4.02622603e+01, 2.89641458e+00],
			 [-2.66057335e+01, 3.66196506e+01, 2.06772390e+01],
			 [-1.87032855e+01, 4.36898248e+01, 1.50505462e+01],
			 [-3.57718595e+01, 3.12887798e+01, 1.50505462e+01],
			 [-3.68411997e+01, 3.32939460e+01, 3.26362385e+00],
			 [-2.92522443e+01, 4.02622603e+01,-2.89641458e+00],
			 [-2.02798675e+01, 4.53264581e+01, 3.26362385e+00],
			 [-3.41493685e+01, 3.08162170e+01,-1.90454695e+01],
			 [-1.87552287e+01, 3.58180762e+01,-2.90491879e+01],
			 [-2.82693303e+01, 2.89056767e+01,-2.90491879e+01],
			 [-1.87552287e+01, 4.20007141e+01,-1.90454695e+01],
			 [-2.82693303e+01, 3.89093951e+01,-1.28628315e+01],
			 [ 5.30968419e-14, 4.97668906e+01, 2.89641458e+00],
			 [-1.05489589e+01, 4.63393261e+01,-1.50505462e+01],
			 [-1.02354662e+01, 4.85900820e+01,-3.26362385e+00],
			 [ 1.02354662e+01, 4.85900820e+01,-3.26362385e+00],
			 [ 0.00000000e+00, 3.87371297e+01,-3.12385476e+01],
			 [-2.90640588e-14, 4.52643774e+01,-2.06772390e+01],
			 [ 1.87552287e+01, 4.20007141e+01,-1.90454695e+01],
			 [ 1.05489589e+01, 4.63393261e+01,-1.50505462e+01],
			 [ 2.02798675e+01, 1.73515344e+01,-4.20007536e+01],
			 [ 1.02354662e+01, 2.46492192e+01,-4.20007536e+01],
			 [ 1.87552287e+01, 3.58180762e+01,-2.90491879e+01],
			 [ 1.05489589e+01, 3.41851944e+01,-3.47163444e+01],
			 [-3.62266357e+01, 1.79533855e+01, 2.90491879e+01],
			 [-3.98606991e+01, 2.29552447e+01, 1.90454695e+01],
			 [-4.57407373e+01, 1.48620665e+01, 1.28628315e+01],
			 [-3.98606991e+01, 6.76888827e+00, 2.90491879e+01],
			 [-4.57407373e+01, 4.85834807e+00, 1.90454695e+01],
			 [-3.57718595e+01,-5.31149942e-01, 3.47163444e+01],
			 [-2.92522443e+01,-2.05964621e+01, 3.47163444e+01],
			 [-2.02798675e+01,-1.73515344e+01, 4.20007536e+01],
			 [-3.68411997e+01,-1.19704314e+01, 3.12385476e+01],
			 [-2.66057335e+01, 2.11747915e+00, 4.20007536e+01],
			 [-1.87032855e+01,-6.07706583e+00, 4.58081761e+01],
			 [-2.27691136e+01, 3.13389963e+01, 3.12385476e+01],
			 [-1.15592661e+01, 3.38569257e+01, 3.47163444e+01],
			 [-2.86278401e+01, 2.14558808e+01, 3.47163444e+01],
			 [-2.27691136e+01, 1.39253812e+01, 4.20007536e+01],
			 [ 3.41493685e+01,-3.08162170e+01, 1.90454695e+01],
			 [ 3.68411997e+01,-3.32939460e+01,-3.26362385e+00],
			 [ 2.92522443e+01,-4.02622603e+01, 2.89641458e+00],
			 [ 2.82693303e+01,-3.89093951e+01, 1.28628315e+01],
			 [ 5.88003814e+00, 8.09317819e+00, 4.87696024e+01],
			 [-6.20778146e+00, 2.59578933e+01, 4.20007536e+01],
			 [-5.88003814e+00, 8.09317819e+00, 4.87696024e+01],
			 [-1.15592661e+01, 1.59099649e+01, 4.58081761e+01],
			 [ 2.92522443e+01,-2.05964621e+01, 3.47163444e+01],
			 [ 3.68411997e+01,-1.19704314e+01, 3.12385476e+01],
			 [ 2.02798675e+01,-1.73515344e+01, 4.20007536e+01],
			 [ 3.57718595e+01,-5.31149942e-01, 3.47163444e+01],
			 [ 2.66057335e+01, 2.11747915e+00, 4.20007536e+01],
			 [ 1.87032855e+01,-6.07706583e+00, 4.58081761e+01],
			 [ 2.27691136e+01,-1.39253812e+01,-4.20007536e+01],
			 [ 2.66057335e+01,-2.11747915e+00,-4.20007536e+01],
			 [ 2.27691136e+01,-3.13389963e+01,-3.12385476e+01],
			 [ 2.66057335e+01,-3.66196506e+01,-2.06772390e+01],
			 [ 3.62266357e+01,-1.79533855e+01,-2.90491879e+01],
			 [ 2.86278401e+01,-2.14558808e+01,-3.47163444e+01],
			 [ 3.57718595e+01,-3.12887798e+01,-1.50505462e+01],
			 [ 3.98606991e+01,-2.29552447e+01,-1.90454695e+01],
			 [ 1.87032855e+01, 4.36898248e+01, 1.50505462e+01],
			 [ 2.66057335e+01, 3.66196506e+01, 2.06772390e+01],
			 [ 2.02798675e+01, 4.53264581e+01, 3.26362385e+00],
			 [ 2.92522443e+01, 4.02622603e+01,-2.89641458e+00],
			 [ 3.68411997e+01, 3.32939460e+01, 3.26362385e+00],
			 [ 3.57718595e+01, 3.12887798e+01, 1.50505462e+01],
			 [ 4.57407373e+01,-4.85834807e+00,-1.90454695e+01],
			 [ 3.98606991e+01,-6.76888827e+00,-2.90491879e+01],
			 [ 3.57718595e+01, 5.31149942e-01,-3.47163444e+01],
			 [-4.73311256e+01, 1.53788150e+01, 2.89641458e+00],
			 [-4.93748471e+01, 5.28065431e+00,-3.26362385e+00],
			 [-4.30489811e+01, 2.47496679e+01,-3.26362385e+00],
			 [-4.08115105e+01, 2.43522954e+01,-1.50505462e+01],
			 [-4.30489811e+01, 1.39874619e+01,-2.06772390e+01],
			 [-4.73311256e+01, 4.28698318e+00,-1.50505462e+01],
			 [-2.27691136e+01,-1.39253812e+01,-4.20007536e+01],
			 [-2.66057335e+01,-2.11747915e+00,-4.20007536e+01],
			 [-3.62266357e+01,-1.79533855e+01,-2.90491879e+01],
			 [-2.86278401e+01,-2.14558808e+01,-3.47163444e+01],
			 [-3.57718595e+01, 5.31149942e-01,-3.47163444e+01],
			 [-3.98606991e+01,-6.76888827e+00,-2.90491879e+01],
			 [ 1.15592661e+01,-3.38569257e+01,-3.47163444e+01],
			 [ 5.88003814e+00,-4.00014792e+01,-2.90491879e+01],
			 [-5.88003814e+00,-4.00014792e+01,-2.90491879e+01],
			 [-1.15592661e+01,-3.38569257e+01,-3.47163444e+01],
			 [-1.15592661e+01,-1.59099649e+01,-4.58081761e+01],
			 [-5.88003814e+00,-8.09317819e+00,-4.87696024e+01],
			 [-6.20778146e+00,-2.59578933e+01,-4.20007536e+01],
			 [ 6.20778146e+00,-2.59578933e+01,-4.20007536e+01],
			 [ 1.15592661e+01,-1.59099649e+01,-4.58081761e+01],
			 [ 5.88003814e+00,-8.09317819e+00,-4.87696024e+01],
			 [-1.87032855e+01, 6.07706583e+00,-4.58081761e+01],
			 [-9.51410157e+00, 3.09131899e+00,-4.87696024e+01],
			 [-2.02798675e+01, 1.73515344e+01,-4.20007536e+01],
			 [-1.02354662e+01, 2.46492192e+01,-4.20007536e+01],
			 [-2.32298683e-14, 1.96657981e+01,-4.58081761e+01],
			 [ 0.00000000e+00, 1.00037184e+01,-4.87696024e+01],
			 [-4.93748471e+01,-5.28065431e+00, 3.26362385e+00],
			 [-4.73311256e+01,-1.53788150e+01,-2.89641458e+00],
			 [-4.73311256e+01,-4.28698318e+00, 1.50505462e+01],
			 [-4.30489811e+01,-1.39874619e+01, 2.06772390e+01],
			 [-4.30489811e+01,-2.47496679e+01, 3.26362385e+00],
			 [-4.08115105e+01,-2.43522954e+01, 1.50505462e+01],
			 [ 4.30489811e+01,-1.39874619e+01, 2.06772390e+01],
			 [ 4.73311256e+01,-4.28698318e+00, 1.50505462e+01],
			 [ 4.93748471e+01,-5.28065431e+00, 3.26362385e+00],
			 [ 4.73311256e+01,-1.53788150e+01,-2.89641458e+00],
			 [ 4.30489811e+01,-2.47496679e+01, 3.26362385e+00],
			 [ 4.08115105e+01,-2.43522954e+01, 1.50505462e+01],
			 [ 1.15592661e+01, 3.38569257e+01, 3.47163444e+01],
			 [ 2.27691136e+01, 3.13389963e+01, 3.12385476e+01],
			 [ 2.86278401e+01, 2.14558808e+01, 3.47163444e+01],
			 [ 2.27691136e+01, 1.39253812e+01, 4.20007536e+01],
			 [ 1.15592661e+01, 1.59099649e+01, 4.58081761e+01],
			 [ 6.20778146e+00, 2.59578933e+01, 4.20007536e+01],
			 [ 3.41493685e+01, 3.08162170e+01,-1.90454695e+01],
			 [ 3.68411997e+01, 1.19704314e+01,-3.12385476e+01],
			 [ 2.82693303e+01, 2.89056767e+01,-2.90491879e+01],
			 [ 2.92522443e+01, 2.05964621e+01,-3.47163444e+01],
			 [ 4.30489811e+01, 2.47496679e+01,-3.26362385e+00],
			 [ 4.93748471e+01, 5.28065431e+00,-3.26362385e+00],
			 [ 4.73311256e+01, 1.53788150e+01, 2.89641458e+00],
			 [ 4.73311256e+01, 4.28698318e+00,-1.50505462e+01],
			 [ 4.30489811e+01, 1.39874619e+01,-2.06772390e+01],
			 [ 4.08115105e+01, 2.43522954e+01,-1.50505462e+01]]);
			union() {
				polyhedron(convexity = 10, faces = [[80, 79, 78], [80, 78, 81], [80, 81, 82], [79, 57, 55], [79, 55, 89], [79, 89, 91], [79, 91, 78], [89, 55, 56], [89, 56, 35], [89, 35, 38], [89, 38, 90], [39, 38, 35], [39, 35, 36], [39, 36, 37], [83, 81, 78], [83, 78, 91], [83, 91, 92], [83, 92, 87], [100, 92, 91], [100, 91, 89], [100, 89, 90], [100, 90, 98], [169, 98, 90], [169, 90, 38], [169, 38, 39], [169, 39, 164], [100, 99, 31], [100, 31, 88], [100, 88, 87], [100, 87, 92], [98, 169, 168], [98, 168, 97], [98, 97, 99], [98, 99, 100], [97, 40, 0], [97, 0, 31], [97, 31, 99], [164, 39, 37], [164, 37, 115], [164, 115, 116], [164, 116, 165], [120, 45, 10], [120, 10, 166], [120, 166, 165], [120, 165, 116], [45, 44, 8], [45, 8, 9], [45, 9, 10], [167, 168, 169], [167, 169, 164], [167, 164, 165], [167, 165, 166], [166, 10, 9], [166, 9, 104], [166, 104, 105], [166, 105, 167], [167, 105, 106], [167, 106, 40], [167, 40, 97], [167, 97, 168], [138, 42, 41], [138, 41, 43], [138, 43, 137], [139, 138, 137], [139, 137, 136], [139, 136, 143], [139, 143, 142], [144, 145, 141], [144, 141, 140], [144, 140, 142], [144, 142, 143], [141, 145, 50], [141, 50, 151], [141, 151, 147], [138, 139, 49], [138, 49, 2], [138, 2, 13], [138, 13, 42], [130, 133, 49], [130, 49, 139], [130, 139, 142], [130, 142, 140], [147, 146, 131], [147, 131, 130], [147, 130, 140], [147, 140, 141], [27, 26, 2], [27, 2, 49], [27, 49, 133], [27, 133, 132], [132, 133, 130], [132, 130, 131], [132, 131, 134], [132, 134, 135], [135, 47, 25], [135, 25, 27], [135, 27, 132], [111, 114, 46], [111, 46, 121], [111, 121, 122], [122, 123, 108], [122, 108, 107], [122, 107, 112], [122, 112, 111], [107, 108, 30], [107, 30, 50], [107, 50, 145], [107, 145, 144], [111, 112, 109], [111, 109, 110], [111, 110, 113], [111, 113, 114], [109, 112, 107], [109, 107, 144], [109, 144, 143], [109, 143, 136], [136, 137, 43], [136, 43, 15], [136, 15, 110], [136, 110, 109], [154, 82, 81], [154, 81, 83], [154, 83, 86], [154, 86, 155], [84, 86, 83], [84, 83, 87], [84, 87, 88], [84, 88, 85], [88, 31, 0], [88, 0, 1], [88, 1, 18], [88, 18, 85], [155, 86, 84], [155, 84, 17], [155, 17, 51], [155, 51, 157], [20, 21, 17], [20, 17, 84], [20, 84, 85], [20, 85, 18], [53, 51, 17], [53, 17, 21], [53, 21, 24], [42, 13, 14], [42, 14, 11], [42, 11, 12], [42, 12, 41], [14, 13, 2], [14, 2, 26], [14, 26, 52], [14, 52, 54], [26, 27, 25], [26, 25, 153], [26, 153, 156], [26, 156, 52], [24, 23, 11], [24, 11, 14], [24, 14, 54], [24, 54, 53], [52, 156, 157], [52, 157, 51], [52, 51, 53], [52, 53, 54], [156, 153, 152], [156, 152, 154], [156, 154, 155], [156, 155, 157], [125, 152, 153], [125, 153, 25], [125, 25, 47], [125, 47, 129], [152, 125, 124], [152, 124, 80], [152, 80, 82], [152, 82, 154], [126, 58, 57], [126, 57, 79], [126, 79, 80], [126, 80, 124], [127, 126, 124], [127, 124, 125], [127, 125, 129], [127, 129, 128], [48, 128, 129], [48, 129, 47], [48, 47, 135], [48, 135, 134], [65, 59, 58], [65, 58, 126], [65, 126, 127], [65, 127, 61], [128, 48, 16], [128, 16, 63], [128, 63, 61], [128, 61, 127], [64, 65, 61], [64, 61, 63], [64, 63, 62], [68, 60, 59], [68, 59, 65], [68, 65, 64], [68, 64, 67], [66, 36, 35], [66, 35, 56], [66, 56, 60], [66, 60, 68], [59, 60, 56], [59, 56, 55], [59, 55, 57], [59, 57, 58], [29, 62, 63], [29, 63, 16], [29, 16, 148], [29, 148, 149], [131, 146, 148], [131, 148, 16], [131, 16, 48], [131, 48, 134], [149, 148, 146], [149, 146, 147], [149, 147, 151], [149, 151, 150], [175, 160, 159], [175, 159, 8], [175, 8, 44], [175, 44, 176], [177, 121, 46], [177, 46, 161], [177, 161, 160], [177, 160, 175], [104, 9, 8], [104, 8, 159], [104, 159, 158], [104, 158, 102], [162, 163, 158], [162, 158, 159], [162, 159, 160], [162, 160, 161], [94, 162, 161], [94, 161, 46], [94, 46, 114], [94, 114, 113], [163, 93, 34], [163, 34, 101], [163, 101, 102], [163, 102, 158], [95, 96, 93], [95, 93, 163], [95, 163, 162], [95, 162, 94], [93, 96, 32], [93, 32, 33], [93, 33, 34], [101, 34, 33], [101, 33, 6], [101, 6, 7], [101, 7, 103], [103, 7, 1], [103, 1, 0], [103, 0, 40], [103, 40, 106], [104, 102, 101], [104, 101, 103], [104, 103, 106], [104, 106, 105], [96, 95, 3], [96, 3, 5], [96, 5, 4], [96, 4, 32], [113, 110, 15], [113, 15, 3], [113, 3, 95], [113, 95, 94], [41, 12, 5], [41, 5, 3], [41, 3, 15], [41, 15, 43], [6, 33, 32], [6, 32, 4], [6, 4, 22], [6, 22, 19], [21, 20, 19], [21, 19, 22], [21, 22, 23], [21, 23, 24], [20, 18, 1], [20, 1, 7], [20, 7, 6], [20, 6, 19], [11, 23, 22], [11, 22, 4], [11, 4, 5], [11, 5, 12], [150, 151, 50], [150, 50, 30], [150, 30, 74], [150, 74, 75], [173, 74, 30], [173, 30, 108], [173, 108, 123], [173, 123, 171], [123, 122, 121], [123, 121, 177], [123, 177, 178], [123, 178, 171], [76, 77, 75], [76, 75, 74], [76, 74, 173], [76, 173, 172], [171, 178, 179], [171, 179, 170], [171, 170, 172], [171, 172, 173], [172, 170, 28], [172, 28, 72], [172, 72, 76], [174, 119, 118], [174, 118, 28], [174, 28, 170], [174, 170, 179], [175, 176, 174], [175, 174, 179], [175, 179, 178], [175, 178, 177], [119, 174, 176], [119, 176, 44], [119, 44, 45], [119, 45, 120], [120, 116, 115], [120, 115, 117], [120, 117, 118], [120, 118, 119], [115, 37, 36], [115, 36, 66], [115, 66, 69], [115, 69, 117], [73, 72, 28], [73, 28, 118], [73, 118, 117], [73, 117, 69], [71, 73, 69], [71, 69, 66], [71, 66, 68], [71, 68, 67], [67, 64, 62], [67, 62, 29], [67, 29, 70], [67, 70, 71], [72, 73, 71], [72, 71, 70], [72, 70, 77], [72, 77, 76], [75, 77, 70], [75, 70, 29], [75, 29, 149], [75, 149, 150]], points = [[ 1.59927594e-15,-9.64202944e+00, 4.70063154e+01],
				 [-2.55898232e-14,-1.89557148e+01, 4.41541563e+01],
				 [-2.56433763e+01,-3.52950796e+01,-1.99293216e+01],
				 [ 1.95463236e+01,-4.36869528e+01,-3.14557517e+00],
				 [ 1.01680621e+01,-4.46661277e+01, 1.45071083e+01],
				 [ 9.86523865e+00,-4.68325280e+01, 3.14557517e+00],
				 [ 1.01680621e+01,-3.29508517e+01, 3.34628231e+01],
				 [ 9.86523865e+00,-2.37576312e+01, 4.04815425e+01],
				 [ 4.40869603e+01, 4.68269230e+00, 1.83568719e+01],
				 [ 3.84195175e+01, 6.52415606e+00, 2.79989014e+01],
				 [ 3.49168453e+01, 1.73042727e+01, 2.79989014e+01],
				 [-9.86523865e+00,-4.68325280e+01, 3.14557517e+00],
				 [ 0.00000000e+00,-4.79699314e+01,-2.79183221e+00],
				 [-1.80279561e+01,-4.21122933e+01,-1.45071083e+01],
				 [-1.95463236e+01,-4.36869528e+01,-3.14557517e+00],
				 [ 1.80279561e+01,-4.21122933e+01,-1.45071083e+01],
				 [-2.81960182e+01, 1.98527749e+01,-3.34628231e+01],
				 [-2.72472399e+01,-2.78605789e+01, 2.79989014e+01],
				 [-9.86523865e+00,-2.37576312e+01, 4.04815425e+01],
				 [ 2.80127814e-14,-3.73359673e+01, 3.01086167e+01],
				 [-1.01680621e+01,-3.29508517e+01, 3.34628231e+01],
				 [-1.80771250e+01,-3.45230574e+01, 2.79989014e+01],
				 [ 0.00000000e+00,-4.36271176e+01, 1.99293216e+01],
				 [-1.01680621e+01,-4.46661277e+01, 1.45071083e+01],
				 [-1.80771250e+01,-4.04821593e+01, 1.83568719e+01],
				 [-4.40869603e+01,-1.43247217e+01,-1.23977700e+01],
				 [-3.44802262e+01,-3.01590194e+01,-1.45071083e+01],
				 [-3.84195175e+01,-2.21252874e+01,-1.83568719e+01],
				 [ 2.72472399e+01, 3.75026084e+01,-1.23977700e+01],
				 [-1.01680621e+01, 3.29508517e+01,-3.34628231e+01],
				 [ 1.80279561e+01, 5.85763802e+00,-4.41541563e+01],
				 [-9.17011493e+00,-2.97955096e+00, 4.70063154e+01],
				 [ 1.80771250e+01,-4.04821593e+01, 1.83568719e+01],
				 [ 1.80771250e+01,-3.45230574e+01, 2.79989014e+01],
				 [ 2.72472399e+01,-2.78605789e+01, 2.79989014e+01],
				 [-9.17011493e+00, 4.33762223e+01, 1.83568719e+01],
				 [ 5.11768302e-14, 4.63557733e+01, 1.23977700e+01],
				 [ 9.17011493e+00, 4.33762223e+01, 1.83568719e+01],
				 [-5.66744271e+00, 3.85552076e+01, 2.79989014e+01],
				 [ 5.66744271e+00, 3.85552076e+01, 2.79989014e+01],
				 [ 9.17011493e+00,-2.97955096e+00, 4.70063154e+01],
				 [ 0.00000000e+00,-4.63557733e+01,-1.23977700e+01],
				 [-9.17011493e+00,-4.33762223e+01,-1.83568719e+01],
				 [ 9.17011493e+00,-4.33762223e+01,-1.83568719e+01],
				 [ 4.40869603e+01, 1.43247217e+01, 1.23977700e+01],
				 [ 3.84195175e+01, 2.21252874e+01, 1.83568719e+01],
				 [ 4.40869603e+01,-1.43247217e+01,-1.23977700e+01],
				 [-4.40869603e+01,-4.68269230e+00,-1.83568719e+01],
				 [-3.55086150e+01, 1.15374484e+01,-3.01086167e+01],
				 [-2.19455310e+01,-3.02054321e+01,-3.01086167e+01],
				 [ 9.17011493e+00, 2.97955096e+00,-4.70063154e+01],
				 [-3.29146826e+01,-2.97020427e+01, 1.83568719e+01],
				 [-3.55086150e+01,-3.20896692e+01,-3.14557517e+00],
				 [-2.72472399e+01,-3.75026084e+01, 1.23977700e+01],
				 [-2.81960182e+01,-3.88084897e+01, 2.79183221e+00],
				 [-2.56433763e+01, 3.52950796e+01, 1.99293216e+01],
				 [-1.80279561e+01, 4.21122933e+01, 1.45071083e+01],
				 [-3.44802262e+01, 3.01590194e+01, 1.45071083e+01],
				 [-3.55086150e+01, 3.20896692e+01, 3.14557517e+00],
				 [-2.81960182e+01, 3.88084897e+01,-2.79183221e+00],
				 [-1.95463236e+01, 4.36869528e+01, 3.14557517e+00],
				 [-3.29146826e+01, 2.97020427e+01,-1.83568719e+01],
				 [-1.80771250e+01, 3.45230574e+01,-2.79989014e+01],
				 [-2.72472399e+01, 2.78605789e+01,-2.79989014e+01],
				 [-1.80771250e+01, 4.04821593e+01,-1.83568719e+01],
				 [-2.72472399e+01, 3.75026084e+01,-1.23977700e+01],
				 [ 5.11796464e-14, 4.79699314e+01, 2.79183221e+00],
				 [-1.01680621e+01, 4.46661277e+01,-1.45071083e+01],
				 [-9.86523865e+00, 4.68325280e+01,-3.14557517e+00],
				 [ 9.86523865e+00, 4.68325280e+01,-3.14557517e+00],
				 [ 0.00000000e+00, 3.73359673e+01,-3.01086167e+01],
				 [-2.80127814e-14, 4.36271176e+01,-1.99293216e+01],
				 [ 1.80771250e+01, 4.04821593e+01,-1.83568719e+01],
				 [ 1.01680621e+01, 4.46661277e+01,-1.45071083e+01],
				 [ 1.95463236e+01, 1.67239113e+01,-4.04815425e+01],
				 [ 9.86523865e+00, 2.37576312e+01,-4.04815425e+01],
				 [ 1.80771250e+01, 3.45230574e+01,-2.79989014e+01],
				 [ 1.01680621e+01, 3.29508517e+01,-3.34628231e+01],
				 [-3.49168453e+01, 1.73042727e+01, 2.79989014e+01],
				 [-3.84195175e+01, 2.21252874e+01, 1.83568719e+01],
				 [-4.40869603e+01, 1.43247217e+01, 1.23977700e+01],
				 [-3.84195175e+01, 6.52415606e+00, 2.79989014e+01],
				 [-4.40869603e+01, 4.68269230e+00, 1.83568719e+01],
				 [-3.44802262e+01,-5.11971432e-01, 3.34628231e+01],
				 [-2.81960182e+01,-1.98527749e+01, 3.34628231e+01],
				 [-1.95463236e+01,-1.67239113e+01, 4.04815425e+01],
				 [-3.55086150e+01,-1.15374484e+01, 3.01086167e+01],
				 [-2.56433763e+01, 2.04088772e+00, 4.04815425e+01],
				 [-1.80279561e+01,-5.85763802e+00, 4.41541563e+01],
				 [-2.19455310e+01, 3.02054321e+01, 3.01086167e+01],
				 [-1.11418896e+01, 3.26344359e+01, 3.34628231e+01],
				 [-2.75941597e+01, 2.06811620e+01, 3.34628231e+01],
				 [-2.19455310e+01, 1.34216856e+01, 4.04815425e+01],
				 [ 3.29146826e+01,-2.97020427e+01, 1.83568719e+01],
				 [ 3.55086150e+01,-3.20896692e+01,-3.14557517e+00],
				 [ 2.81960182e+01,-3.88084897e+01, 2.79183221e+00],
				 [ 2.72472399e+01,-3.75026084e+01, 1.23977700e+01],
				 [ 5.66744271e+00, 7.80056568e+00, 4.70063154e+01],
				 [-5.98323952e+00, 2.50189692e+01, 4.04815425e+01],
				 [-5.66744271e+00, 7.80056568e+00, 4.70063154e+01],
				 [-1.11418896e+01, 1.53354954e+01, 4.41541563e+01],
				 [ 2.81960182e+01,-1.98527749e+01, 3.34628231e+01],
				 [ 3.55086150e+01,-1.15374484e+01, 3.01086167e+01],
				 [ 1.95463236e+01,-1.67239113e+01, 4.04815425e+01],
				 [ 3.44802262e+01,-5.11971432e-01, 3.34628231e+01],
				 [ 2.56433763e+01, 2.04088772e+00, 4.04815425e+01],
				 [ 1.80279561e+01,-5.85763802e+00, 4.41541563e+01],
				 [ 2.19455310e+01,-1.34216856e+01,-4.04815425e+01],
				 [ 2.56433763e+01,-2.04088772e+00,-4.04815425e+01],
				 [ 2.19455310e+01,-3.02054321e+01,-3.01086167e+01],
				 [ 2.56433763e+01,-3.52950796e+01,-1.99293216e+01],
				 [ 3.49168453e+01,-1.73042727e+01,-2.79989014e+01],
				 [ 2.75941597e+01,-2.06811620e+01,-3.34628231e+01],
				 [ 3.44802262e+01,-3.01590194e+01,-1.45071083e+01],
				 [ 3.84195175e+01,-2.21252874e+01,-1.83568719e+01],
				 [ 1.80279561e+01, 4.21122933e+01, 1.45071083e+01],
				 [ 2.56433763e+01, 3.52950796e+01, 1.99293216e+01],
				 [ 1.95463236e+01, 4.36869528e+01, 3.14557517e+00],
				 [ 2.81960182e+01, 3.88084897e+01,-2.79183221e+00],
				 [ 3.55086150e+01, 3.20896692e+01, 3.14557517e+00],
				 [ 3.44802262e+01, 3.01590194e+01, 1.45071083e+01],
				 [ 4.40869603e+01,-4.68269230e+00,-1.83568719e+01],
				 [ 3.84195175e+01,-6.52415606e+00,-2.79989014e+01],
				 [ 3.44802262e+01, 5.11971432e-01,-3.34628231e+01],
				 [-4.56221158e+01, 1.48235240e+01, 2.79183221e+00],
				 [-4.75889073e+01, 5.08964753e+00,-3.14557517e+00],
				 [-4.14918545e+01, 2.38544465e+01,-3.14557517e+00],
				 [-3.93379078e+01, 2.34729942e+01,-1.45071083e+01],
				 [-4.14918545e+01, 1.34815208e+01,-1.99293216e+01],
				 [-4.56221158e+01, 4.13219082e+00,-1.45071083e+01],
				 [-2.19455310e+01,-1.34216856e+01,-4.04815425e+01],
				 [-2.56433763e+01,-2.04088772e+00,-4.04815425e+01],
				 [-3.49168453e+01,-1.73042727e+01,-2.79989014e+01],
				 [-2.75941597e+01,-2.06811620e+01,-3.34628231e+01],
				 [-3.44802262e+01, 5.11971432e-01,-3.34628231e+01],
				 [-3.84195175e+01,-6.52415606e+00,-2.79989014e+01],
				 [ 1.11418896e+01,-3.26344359e+01,-3.34628231e+01],
				 [ 5.66744271e+00,-3.85552076e+01,-2.79989014e+01],
				 [-5.66744271e+00,-3.85552076e+01,-2.79989014e+01],
				 [-1.11418896e+01,-3.26344359e+01,-3.34628231e+01],
				 [-1.11418896e+01,-1.53354954e+01,-4.41541563e+01],
				 [-5.66744271e+00,-7.80056568e+00,-4.70063154e+01],
				 [-5.98323952e+00,-2.50189692e+01,-4.04815425e+01],
				 [ 5.98323952e+00,-2.50189692e+01,-4.04815425e+01],
				 [ 1.11418896e+01,-1.53354954e+01,-4.41541563e+01],
				 [ 5.66744271e+00,-7.80056568e+00,-4.70063154e+01],
				 [-1.80279561e+01, 5.85763802e+00,-4.41541563e+01],
				 [-9.17011493e+00, 2.97955096e+00,-4.70063154e+01],
				 [-1.95463236e+01, 1.67239113e+01,-4.04815425e+01],
				 [-9.86523865e+00, 2.37576312e+01,-4.04815425e+01],
				 [-2.23910953e-14, 1.89557148e+01,-4.41541563e+01],
				 [ 0.00000000e+00, 9.64202944e+00,-4.70063154e+01],
				 [-4.75889073e+01,-5.08964753e+00, 3.14557517e+00],
				 [-4.56221158e+01,-1.48235240e+01,-2.79183221e+00],
				 [-4.56221158e+01,-4.13219082e+00, 1.45071083e+01],
				 [-4.14918545e+01,-1.34815208e+01, 1.99293216e+01],
				 [-4.14918545e+01,-2.38544465e+01, 3.14557517e+00],
				 [-3.93379078e+01,-2.34729942e+01, 1.45071083e+01],
				 [ 4.14918545e+01,-1.34815208e+01, 1.99293216e+01],
				 [ 4.56221158e+01,-4.13219082e+00, 1.45071083e+01],
				 [ 4.75889073e+01,-5.08964753e+00, 3.14557517e+00],
				 [ 4.56221158e+01,-1.48235240e+01,-2.79183221e+00],
				 [ 4.14918545e+01,-2.38544465e+01, 3.14557517e+00],
				 [ 3.93379078e+01,-2.34729942e+01, 1.45071083e+01],
				 [ 1.11418896e+01, 3.26344359e+01, 3.34628231e+01],
				 [ 2.19455310e+01, 3.02054321e+01, 3.01086167e+01],
				 [ 2.75941597e+01, 2.06811620e+01, 3.34628231e+01],
				 [ 2.19455310e+01, 1.34216856e+01, 4.04815425e+01],
				 [ 1.11418896e+01, 1.53354954e+01, 4.41541563e+01],
				 [ 5.98323952e+00, 2.50189692e+01, 4.04815425e+01],
				 [ 3.29146826e+01, 2.97020427e+01,-1.83568719e+01],
				 [ 3.55086150e+01, 1.15374484e+01,-3.01086167e+01],
				 [ 2.72472399e+01, 2.78605789e+01,-2.79989014e+01],
				 [ 2.81960182e+01, 1.98527749e+01,-3.34628231e+01],
				 [ 4.14918545e+01, 2.38544465e+01,-3.14557517e+00],
				 [ 4.75889073e+01, 5.08964753e+00,-3.14557517e+00],
				 [ 4.56221158e+01, 1.48235240e+01, 2.79183221e+00],
				 [ 4.56221158e+01, 4.13219082e+00,-1.45071083e+01],
				 [ 4.14918545e+01, 1.34815208e+01,-1.99293216e+01],
				 [ 3.93379078e+01, 2.34729942e+01,-1.45071083e+01]]);
				multmatrix(m = [[ 0.30901699, 1.21969329,-0.1556959 ,-7.72799108],
				 [-0.4253254 , 0.36758457, 0.85973634,42.67315253],
				 [ 0.85065081,-0.25928724, 0.48642802,24.14393335],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.61976350e-01, 1.05172209e+00, 1.72261675e-01, 8.75465057e+00],
				 [ 7.73494088e-01, 7.64120828e-01,-2.37097854e-01,-1.20497428e+01],
				 [-2.93069065e-01,-3.71271248e-16,-9.56091273e-01,-4.74787397e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.08910336,-0.8738977 , 0.73496174,36.45231946],
				 [ 0.95296065,-0.3538082 ,-0.13339736,-6.27591076],
				 [ 0.28970087, 0.89505451, 0.66485817,33.10985999],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.63222235, -0.49903485,  0.67300554, 33.17943372],
				 [  0.71858772,  0.79990103, -0.32407895,-16.34881733],
				 [ -0.28970087,  0.89505451,  0.66485817, 33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.48805008, -0.91496133,  0.51618754, 25.80165814],
				 [ -0.62732294, -0.90226968, -0.35320748,-17.76165399],
				 [  0.60685504, -0.19686335, -0.7802531 ,-38.51258967],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.80901699,  0.75381191, -0.09622536, -4.77616115],
				 [  0.26286556,  0.27364613, -0.94159052,-46.73599787],
				 [ -0.52573111, -1.02317418, -0.32271966,-16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.57350470e-01,-4.01722093e-01, 9.37949533e-01, 4.67227529e+01],
				 [-5.11262668e-02,-1.23637347e+00,-3.04758277e-01,-1.51811427e+01],
				 [ 9.86218502e-01, 1.04420039e-16,-1.65448075e-01,-7.91126992e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.32222347e-01, 4.99034846e-01, 6.73005539e-01, 3.31794337e+01],
				 [-5.80478535e-01,-4.42834474e-01, 7.39599733e-01, 3.69257724e+01],
				 [ 5.13166225e-01,-1.11573377e+00, 7.46858954e-03, 1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-8.52675345e-01, 6.64019244e-01, 1.09747103e-01, 5.13830127e+00],
				 [-9.80060281e-02, 6.49352918e-02,-9.93931483e-01,-4.93759593e+01],
				 [-5.13166225e-01,-1.11573377e+00, 7.46858954e-03, 1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.61976350e-01,-1.05172209e+00,-1.72261675e-01,-8.75465057e+00],
				 [ 7.73494088e-01,-7.64120828e-01, 2.37097854e-01, 1.20497428e+01],
				 [-2.93069065e-01,-2.55248983e-16, 9.56091273e-01, 4.74787397e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.8120489 , -0.65      ,  0.30095945, 14.71092718],
				 [  0.42929876,  0.2111978 , -0.88843085,-44.34733973],
				 [  0.3953216 ,  1.10584605,  0.34657472, 17.11645428],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 3.09016994e-01,-1.05172209e+00, 5.00000000e-01, 2.47866424e+01],
				 [-4.25325404e-01,-7.64120828e-01,-6.88190960e-01,-3.41158865e+01],
				 [ 8.50650808e-01,-1.21115357e-15,-5.25731112e-01,-2.60622182e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.5       , -0.77069181,  0.63130097, 31.33472584],
				 [ -0.68819096,  0.22169515,  0.70520288, 35.00285944],
				 [ -0.52573111, -1.02317418, -0.32271966,-16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.85267534,  0.66401924,  0.1097471 ,  5.13830127],
				 [ -0.4151602 ,  1.02698257, -0.45117978,-22.2464904 ],
				 [ -0.31715417,  0.44089142,  0.88565929, 44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.13134964, -1.1819117 ,  0.39518375, 19.56984724],
				 [  0.939234  , -0.31416476, -0.24379792,-11.7613585 ],
				 [  0.31715417,  0.44089142,  0.88565929, 44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.00000000e+00, 3.96046348e-16, 1.00000000e+00, 4.95732849e+01],
				 [ 8.50650808e-01, 6.83450446e-01,-1.60164528e-16,-9.32587341e-15],
				 [-5.25731112e-01, 1.10584605e+00,-2.59151651e-16,-1.19904087e-14],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.93385389,-0.06644236, 0.35398409,17.23313202],
				 [-0.2097387 , 0.94045885, 0.65776811,32.72885288],
				 [-0.28970087,-0.89505451, 0.66485817,33.10985999],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.57350470e-01, 4.01722093e-01, 9.37949533e-01, 4.67227529e+01],
				 [-9.04965006e-01, 5.52923025e-01, 1.16892119e-02, 2.86841523e-01],
				 [-3.95321599e-01,-1.10584605e+00, 3.46574718e-01, 1.71164543e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.        ,  1.3       ,  0.        ,  0.        ],
				 [  0.16544807,  0.        , -0.9862185 ,-49.12720972],
				 [ -0.9862185 ,  0.        , -0.16544807, -7.91126992],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.80901699,  0.44900148, -0.47560507,-23.60673476],
				 [ -0.26286556,  0.66446389,  0.81832258, 40.61757362],
				 [  0.52573111,  1.02317418, -0.32271966,-16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-3.09016994e-01, 1.05172209e+00,-5.00000000e-01,-2.47866424e+01],
				 [ 9.51056516e-01, 3.41725223e-01,-1.62459848e-01,-8.05366833e+00],
				 [ 1.14001837e-15,-6.83450446e-01,-8.50650808e-01,-4.21695548e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.00000000e-01, 4.01722093e-01,-8.09016994e-01,-4.01056299e+01],
				 [-1.62459848e-01,-1.23637347e+00,-2.62865556e-01,-1.30311091e+01],
				 [-8.50650808e-01, 6.52159617e-16, 5.25731112e-01, 2.60622182e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-3.56700444e-01,-2.66950363e-01, 9.11371294e-01, 4.53715054e+01],
				 [-7.80656915e-01,-6.11453721e-01,-4.11517417e-01,-2.01448254e+01],
				 [ 5.13166225e-01,-1.11573377e+00, 7.46858954e-03, 1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.58331983e-01,-7.71525234e-01, 4.63011192e-01, 2.27454921e+01],
				 [-6.82650887e-01,-9.48874896e-01, 3.50465226e-02, 1.98772869e+00],
				 [ 3.17154169e-01,-4.40891421e-01,-8.85659290e-01,-4.40807555e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.00000000e+00,-2.50190917e-15, 8.98351535e-17, 2.35367281e-14],
				 [-1.20356313e-15, 7.63886945e-01,-8.09147676e-01,-4.01621760e+01],
				 [ 1.50445392e-15,-1.05189198e+00,-5.87605342e-01,-2.91658864e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.85267534, -0.66401924, -0.1097471 , -5.13830127],
				 [ -0.4151602 , -1.02698257,  0.45117978, 22.2464904 ],
				 [ -0.31715417, -0.44089142, -0.88565929,-44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.76357199, -0.20987845,  0.62521464, 31.31401819],
				 [  0.44411163, -0.74303599, -0.68998333,-34.09056696],
				 [  0.46874586,  1.04587215, -0.36473231,-17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.1702819 , 0.1434361 , 0.97919873,48.54715021],
				 [-0.08278124, 1.28934071,-0.09735983,-4.80302981],
				 [-0.98191208,-0.08382487, 0.17801939, 9.1938343 ],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 2.61096362e-02, 1.27056008e+00,-2.09994348e-01,-1.04339416e+01],
				 [ 1.87528521e-01, 2.62012356e-01, 9.61359179e-01, 4.76553014e+01],
				 [ 9.81912084e-01,-8.38248682e-02,-1.78019389e-01,-9.19383430e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.        ,-0.49319363, 0.92524107,45.92449029],
				 [ 0.85065081, 0.63235642, 0.19945172, 9.8998184 ],
				 [-0.52573111, 1.02317418, 0.32271966,16.01824266],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.5       ,  0.77069181,  0.63130097, 31.33472584],
				 [ -0.68819096,  0.22169515, -0.70520288,-35.00285944],
				 [ -0.52573111, -1.02317418,  0.32271966, 16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-6.32222347e-01,-4.99034846e-01, 6.73005539e-01, 3.31794337e+01],
				 [-5.80478535e-01,-4.42834474e-01,-7.39599733e-01,-3.69257724e+01],
				 [ 5.13166225e-01,-1.11573377e+00,-7.46858954e-03,-1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.58331983e-01, 7.71525234e-01, 4.63011192e-01, 2.27454921e+01],
				 [ 5.88962070e-01,-3.00044784e-02,-8.07831032e-01,-4.03159656e+01],
				 [-4.68745859e-01, 1.04587215e+00,-3.64732313e-01,-1.79356346e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.09724794, -1.05172209, -0.57968469,-28.87624936],
				 [  0.82224097,  0.34172522, -0.50479846,-24.85044638],
				 [  0.56076967, -0.68345045,  0.63964378, 32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.70281901e-01, 1.43436099e-01, 9.79198734e-01, 4.85471502e+01],
				 [-8.41227971e-01, 6.51585938e-01,-2.02766022e-01,-1.03711956e+01],
				 [-5.13166225e-01,-1.11573377e+00, 7.46858954e-03, 1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.        ,  1.20281339, -0.37937971,-18.83057361],
				 [ -0.52573111, -0.41953556, -0.78705706,-39.06570479],
				 [ -0.85065081,  0.25928724,  0.48642802, 24.14393335],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.87878498, -0.60654084, -0.10024724, -5.29564038],
				 [  0.37922337, -0.72179335, -0.74021221,-36.60757904],
				 [  0.28970087, -0.89505451,  0.66485817, 33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-7.51946366e-01,-6.03315778e-16, 6.59224289e-01, 3.25574308e+01],
				 [ 3.46574718e-01,-1.10584605e+00, 3.95321599e-01, 1.97837349e+01],
				 [ 5.60769674e-01, 6.83450446e-01, 6.39643784e-01, 3.20107554e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.30901699,-1.21969329, 0.1556959 , 7.72799108],
				 [ 0.95105652,-0.39630237, 0.05058866, 2.51097652],
				 [ 0.        , 0.21282086, 0.98650878,48.96552319],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.40462588,  0.65      ,  0.76568786, 37.96810236],
				 [  0.82462036,  0.2111978 , -0.54185613,-27.23088545],
				 [ -0.3953216 ,  1.10584605, -0.34657472,-17.11645428],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 3.09016994e-01,-1.05172209e+00,-5.00000000e-01,-2.47866424e+01],
				 [ 9.51056516e-01, 3.41725223e-01, 1.62459848e-01, 8.05366833e+00],
				 [-5.70009187e-16,-6.83450446e-01, 8.50650808e-01, 4.21695548e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.87878498,  0.60654084, -0.10024724, -5.29564038],
				 [  0.37922337, -0.72179335,  0.74021221, 36.60757904],
				 [  0.28970087, -0.89505451, -0.66485817,-33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.80901699,  0.65      ,  0.30901699, 15.31898749],
				 [  0.58778525,  0.89464825,  0.4253254 , 21.08477742],
				 [  0.        ,  0.68345045, -0.85065081,-42.16955483],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 3.56700444e-01,-2.66950363e-01,-9.11371294e-01,-4.53715054e+01],
				 [-7.80656915e-01, 6.11453721e-01,-4.11517417e-01,-2.01448254e+01],
				 [ 5.13166225e-01, 1.11573377e+00, 7.46858954e-03, 1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 2.61096362e-02,-1.27056008e+00, 2.09994348e-01, 1.04339416e+01],
				 [-1.87528521e-01, 2.62012356e-01, 9.61359179e-01, 4.76553014e+01],
				 [-9.81912084e-01,-8.38248682e-02,-1.78019389e-01,-9.19383430e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.00000000e+00,-2.35500209e-15, 2.20578642e-16,-6.21724894e-15],
				 [-1.42502297e-15,-1.10584605e+00,-5.25731112e-01,-2.60622182e+01],
				 [ 1.14001837e-15, 6.83450446e-01,-8.50650808e-01,-4.21695548e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 5.00000000e-01,-4.01722093e-01, 8.09016994e-01, 4.01056299e+01],
				 [-6.88190960e-01, 5.52923025e-01, 5.87785252e-01, 2.91384457e+01],
				 [-5.25731112e-01,-1.10584605e+00,-1.94289029e-16,-8.65973959e-15],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.93385389, -0.06644236, -0.35398409,-17.23313202],
				 [ -0.16531834, -1.22114707, -0.30050438,-14.97757109],
				 [ -0.31715417,  0.44089142, -0.88565929,-44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 3.09016994e-01, 7.26499657e-01, 7.69545170e-01, 3.81964992e+01],
				 [ 9.51056516e-01,-2.36054048e-01,-2.50040383e-01,-1.24107949e+01],
				 [-1.20356313e-15, 1.05189198e+00,-5.87605342e-01,-2.91658864e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.08910336, -0.8738977 , -0.73496174,-36.45231946],
				 [ -0.16706062,  0.95878893, -0.65432433,-32.42103168],
				 [  0.98191208,  0.08382487, -0.17801939, -9.1938343 ],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.90929684,-0.40172209, 0.27872524,14.16532218],
				 [-0.13000038, 0.55292303, 0.89565518,44.52461754],
				 [-0.3953216 ,-1.10584605, 0.34657472,17.11645428],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.90929684,  0.40172209, -0.27872524,-14.16532218],
				 [ -0.13000038, -0.55292303, -0.89565518,-44.52461754],
				 [ -0.3953216 ,  1.10584605, -0.34657472,-17.11645428],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.00000000e-01, 2.73122496e-02, 8.65770526e-01, 4.29726604e+01],
				 [ 1.62459848e-01,-1.27358713e+00, 1.17597542e-01, 5.83697306e+00],
				 [ 8.50650808e-01, 2.59287235e-01, 4.86428015e-01, 2.41439334e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-2.34093766e-15, 1.30000000e+00,-2.94320494e-16,-1.45904337e-14],
				 [ 5.25731112e-01, 1.92538804e-15, 8.50650808e-01, 4.21695548e+01],
				 [ 8.50650808e-01, 2.38756319e-15,-5.25731112e-01,-2.60622182e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.40462588, 0.65      , 0.76568786,37.96810236],
				 [-0.72236782,-0.89464825, 0.06766042, 3.13139993],
				 [ 0.56076967,-0.68345045, 0.63964378,32.01075544],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 3.56700444e-01, 2.66950363e-01, 9.11371294e-01, 4.53715054e+01],
				 [-7.80656915e-01,-6.11453721e-01, 4.11517417e-01, 2.01448254e+01],
				 [ 5.13166225e-01,-1.11573377e+00,-7.46858954e-03,-1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.00000000e-01,-4.01722093e-01,-8.09016994e-01,-4.01056299e+01],
				 [-6.88190960e-01,-5.52923025e-01, 5.87785252e-01, 2.91384457e+01],
				 [-5.25731112e-01, 1.10584605e+00, 6.38378239e-16, 7.10542736e-15],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.4458038 , -1.14084806, -0.17640955, -8.91918592],
				 [ -0.83706165, -0.44054563, -0.42951984,-21.01800651],
				 [  0.31715417,  0.44089142, -0.88565929,-44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.86418543e-01,-6.41813215e-01,-8.49415090e-01,-4.20986196e+01],
				 [-3.31177603e-02,-1.12740817e+00, 4.96792817e-01, 2.46495662e+01],
				 [-9.81912084e-01,-8.38248682e-02,-1.78019389e-01,-9.19383430e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.13134964,  1.1819117 ,  0.39518375, 19.56984724],
				 [  0.939234  , -0.31416476,  0.24379792, 11.7613585 ],
				 [  0.31715417,  0.44089142, -0.88565929,-44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.93385389,  0.06644236, -0.35398409,-17.23313202],
				 [  0.2097387 ,  0.94045885,  0.65776811, 32.72885288],
				 [  0.28970087, -0.89505451,  0.66485817, 33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-9.09296836e-01, 4.01722093e-01,-2.78725244e-01,-1.41653222e+01],
				 [-2.95448452e-01,-1.23637347e+00,-9.05633218e-02,-4.60259218e+00],
				 [-2.93069065e-01, 4.40884607e-16, 9.56091273e-01, 4.74787397e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 7.63571985e-01,-2.09878454e-01,-6.25214641e-01,-3.13140182e+01],
				 [ 2.20646281e-01, 1.26775228e+00, 1.76565727e-02, 7.96354213e-01],
				 [ 6.06855042e-01,-1.96863355e-01, 7.80253099e-01, 3.85125897e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.35670044, -0.26695036, -0.91137129,-45.37150539],
				 [ -0.80811021,  0.72449221,  0.19071629,  9.17392994],
				 [  0.46874586,  1.04587215, -0.36473231,-17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-7.63571985e-01,-2.09878454e-01, 6.25214641e-01, 3.13140182e+01],
				 [ 2.20646281e-01,-1.26775228e+00, 1.76565727e-02, 7.96354213e-01],
				 [ 6.06855042e-01, 1.96863355e-01, 7.80253099e-01, 3.85125897e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.63222235, -0.49903485, -0.67300554,-33.17943372],
				 [ -0.71858772,  0.79990103,  0.32407895, 16.34881733],
				 [  0.28970087,  0.89505451, -0.66485817,-33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.93385389,  0.06644236,  0.35398409, 17.23313202],
				 [ -0.2097387 ,  0.94045885, -0.65776811,-32.72885288],
				 [ -0.28970087, -0.89505451, -0.66485817,-33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.1702819 , -0.1434361 , -0.97919873,-48.54715021],
				 [  0.08278124,  1.28934071, -0.09735983, -4.80302981],
				 [  0.98191208, -0.08382487,  0.17801939,  9.1938343 ],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.63222235,  0.49903485,  0.67300554, 33.17943372],
				 [  0.71858772,  0.79990103,  0.32407895, 16.34881733],
				 [ -0.28970087,  0.89505451, -0.66485817,-33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.90929684,  0.40172209,  0.27872524, 14.16532218],
				 [ -0.13000038,  0.55292303, -0.89565518,-44.52461754],
				 [ -0.3953216 , -1.10584605, -0.34657472,-17.11645428],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-8.09016994e-01,-6.50000000e-01, 3.09016994e-01, 1.53189875e+01],
				 [-2.62865556e-01,-2.11197803e-01,-9.51056516e-01,-4.71469956e+01],
				 [ 5.25731112e-01,-1.10584605e+00,-8.32667268e-17,-6.66133815e-16],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.48805008, -0.91496133, -0.51618754,-25.80165814],
				 [ -0.62732294,  0.90226968, -0.35320748,-17.76165399],
				 [  0.60685504,  0.19686335, -0.7802531 ,-38.51258967],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 8.09016994e-01,-6.50000000e-01,-3.09016994e-01,-1.53189875e+01],
				 [ 2.62865556e-01,-2.11197803e-01, 9.51056516e-01, 4.71469956e+01],
				 [-5.25731112e-01,-1.10584605e+00,-4.71844785e-16,-2.75335310e-14],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 5.00000000e-01,-4.01722093e-01, 8.09016994e-01, 4.01056299e+01],
				 [ 6.88190960e-01,-5.52923025e-01,-5.87785252e-01,-2.91384457e+01],
				 [ 5.25731112e-01, 1.10584605e+00,-2.77555756e-17, 0.00000000e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.58331983e-01, 7.71525234e-01, 4.63011192e-01, 2.27454921e+01],
				 [-5.88962070e-01, 3.00044784e-02, 8.07831032e-01, 4.03159656e+01],
				 [ 4.68745859e-01,-1.04587215e+00, 3.64732313e-01, 1.79356346e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.00000000e-01, 2.73122496e-02,-8.65770526e-01,-4.29726604e+01],
				 [-6.88190960e-01,-8.01479032e-01, 3.82483224e-01, 1.89846168e+01],
				 [-5.25731112e-01, 1.02317418e+00, 3.22719661e-01, 1.60182427e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.48805008,  0.91496133, -0.51618754,-25.80165814],
				 [ -0.62732294,  0.90226968,  0.35320748, 17.76165399],
				 [  0.60685504,  0.19686335,  0.7802531 , 38.51258967],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.35670044,  0.26695036,  0.91137129, 45.37150539],
				 [  0.80811021,  0.72449221,  0.19071629,  9.17392994],
				 [ -0.46874586,  1.04587215, -0.36473231,-17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-2.61096362e-02,-1.27056008e+00, 2.09994348e-01, 1.04339416e+01],
				 [ 7.94383563e-01,-1.92150729e-01,-5.89158277e-01,-2.95353141e+01],
				 [ 6.06855042e-01, 1.96863355e-01, 7.80253099e-01, 3.85125897e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.30901699,-1.21969329,-0.1556959 ,-7.72799108],
				 [ 0.95105652, 0.39630237, 0.05058866, 2.51097652],
				 [ 0.        ,-0.21282086, 0.98650878,48.96552319],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.48805008,  0.91496133, -0.51618754,-25.80165814],
				 [  0.823335  ,  0.22742733, -0.5399204 ,-26.50345425],
				 [ -0.28970087, -0.89505451, -0.66485817,-33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.74743534, -0.57537086,  0.495431  , 24.86548762],
				 [  0.27030976, -1.1489966 , -0.38177641,-19.05018218],
				 [  0.60685504, -0.19686335,  0.7802531 , 38.51258967],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-9.72479385e-02, 1.05172209e+00,-5.79684691e-01,-2.88762494e+01],
				 [-1.33850304e-01,-7.64120828e-01,-7.97867529e-01,-3.97447475e+01],
				 [-9.86218502e-01, 1.82154956e-15, 1.65448075e-01, 7.91126992e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.58331983e-01,-7.71525234e-01,-4.63011192e-01,-2.27454921e+01],
				 [-5.88962070e-01,-3.00044784e-02,-8.07831032e-01,-4.03159656e+01],
				 [ 4.68745859e-01, 1.04587215e+00,-3.64732313e-01,-1.79356346e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.8120489 ,  0.65      , -0.30095945,-14.71092718],
				 [  0.16159815,  0.89464825,  0.70730421, 35.14215537],
				 [  0.56076967,  0.68345045, -0.63964378,-32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.5       ,  0.77069181,  0.63130097, 31.33472584],
				 [ -0.16245985,  1.01429989, -0.60402556,-29.98090641],
				 [ -0.85065081,  0.25928724,  0.48642802, 24.14393335],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.13134964,-1.1819117 , 0.39518375,19.56984724],
				 [ 0.1363669 , 0.53484403, 0.90118749,44.68686572],
				 [-0.98191208,-0.08382487, 0.17801939, 9.1938343 ],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.80901699,-0.75381191, 0.09622536, 4.77616115],
				 [ 0.58778525, 1.03753308,-0.13244284,-6.57382186],
				 [ 0.        , 0.21282086, 0.98650878,48.96552319],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.08910336,  0.8738977 , -0.73496174,-36.45231946],
				 [ -0.95296065, -0.3538082 , -0.13339736, -6.27591076],
				 [ -0.28970087,  0.89505451,  0.66485817, 33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.58331983e-01,-7.71525234e-01,-4.63011192e-01,-2.27454921e+01],
				 [ 5.88962070e-01, 3.00044784e-02, 8.07831032e-01, 4.03159656e+01],
				 [-4.68745859e-01,-1.04587215e+00, 3.64732313e-01, 1.79356346e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-3.09016994e-01, 1.05172209e+00, 5.00000000e-01, 2.47866424e+01],
				 [-4.25325404e-01,-7.64120828e-01, 6.88190960e-01, 3.41158865e+01],
				 [ 8.50650808e-01, 1.21115357e-15, 5.25731112e-01, 2.60622182e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.58331983e-01, 7.71525234e-01,-4.63011192e-01,-2.27454921e+01],
				 [ 6.82650887e-01,-9.48874896e-01, 3.50465226e-02, 1.98772869e+00],
				 [-3.17154169e-01,-4.40891421e-01,-8.85659290e-01,-4.40807555e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.57350470e-01, 4.01722093e-01,-9.37949533e-01,-4.67227529e+01],
				 [-9.04965006e-01,-5.52923025e-01, 1.16892119e-02, 2.86841523e-01],
				 [-3.95321599e-01, 1.10584605e+00, 3.46574718e-01, 1.71164543e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.00000000e-01,-4.01722093e-01,-8.09016994e-01,-4.01056299e+01],
				 [ 6.88190960e-01, 5.52923025e-01,-5.87785252e-01,-2.91384457e+01],
				 [ 5.25731112e-01,-1.10584605e+00, 1.11022302e-16, 5.32907052e-15],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.8120489 ,  0.65      , -0.30095945,-14.71092718],
				 [ -0.16159815, -0.89464825, -0.70730421,-35.14215537],
				 [ -0.56076967, -0.68345045,  0.63964378, 32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.80901699,  0.75381191,  0.09622536,  4.77616115],
				 [  0.58778525,  1.03753308,  0.13244284,  6.57382186],
				 [  0.        ,  0.21282086, -0.98650878,-48.96552319],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.5       ,  0.77069181, -0.63130097,-31.33472584],
				 [ -0.68819096, -0.22169515, -0.70520288,-35.00285944],
				 [ -0.52573111,  1.02317418,  0.32271966, 16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.08910336, -0.8738977 , -0.73496174,-36.45231946],
				 [  0.16706062, -0.95878893,  0.65432433, 32.42103168],
				 [ -0.98191208, -0.08382487,  0.17801939,  9.1938343 ],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.        ,  0.49319363,  0.92524107, 45.92449029],
				 [  0.85065081,  0.63235642, -0.19945172, -9.8998184 ],
				 [ -0.52573111,  1.02317418, -0.32271966,-16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.80901699,-0.75381191,-0.09622536,-4.77616115],
				 [ 0.58778525,-1.03753308,-0.13244284,-6.57382186],
				 [ 0.        ,-0.21282086, 0.98650878,48.96552319],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.87878498, -0.60654084, -0.10024724, -5.29564038],
				 [ -0.08952249, -0.47776529,  0.92570018, 45.98576611],
				 [ -0.46874586, -1.04587215, -0.36473231,-17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.59224289e-01, 5.10497966e-16, 7.51946366e-01, 3.76308999e+01],
				 [ 6.39643784e-01, 6.83450446e-01,-5.60769674e-01,-2.76950048e+01],
				 [-3.95321599e-01, 1.10584605e+00, 3.46574718e-01, 1.71164543e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 5.00000000e-01, 4.01722093e-01, 8.09016994e-01, 4.01056299e+01],
				 [-1.62459848e-01, 1.23637347e+00,-2.62865556e-01,-1.30311091e+01],
				 [-8.50650808e-01, 2.09622734e-16, 5.25731112e-01, 2.60622182e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-3.09016994e-01, 7.26499657e-01,-7.69545170e-01,-3.81964992e+01],
				 [ 9.51056516e-01, 2.36054048e-01,-2.50040383e-01,-1.24107949e+01],
				 [-3.00890783e-16,-1.05189198e+00,-5.87605342e-01,-2.91658864e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.5       , -0.77069181,  0.63130097, 31.33472584],
				 [ -0.16245985,  1.01429989,  0.60402556, 29.98090641],
				 [ -0.85065081,  0.25928724, -0.48642802,-24.14393335],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.4458038 , 1.14084806,-0.17640955,-8.91918592],
				 [-0.83706165,-0.44054563, 0.42951984,21.01800651],
				 [ 0.31715417, 0.44089142, 0.88565929,44.08075548],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 9.09296836e-01, 4.01722093e-01, 2.78725244e-01, 1.41653222e+01],
				 [-2.95448452e-01, 1.23637347e+00,-9.05633218e-02,-4.60259218e+00],
				 [-2.93069065e-01,-4.40884607e-16, 9.56091273e-01, 4.74787397e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-2.61096362e-02,-1.27056008e+00,-2.09994348e-01,-1.04339416e+01],
				 [ 1.87528521e-01, 2.62012356e-01,-9.61359179e-01,-4.76553014e+01],
				 [ 9.81912084e-01,-8.38248682e-02, 1.78019389e-01, 9.19383430e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-6.59224289e-01, 1.85635624e-16,-7.51946366e-01,-3.76308999e+01],
				 [ 6.39643784e-01,-6.83450446e-01,-5.60769674e-01,-2.76950048e+01],
				 [-3.95321599e-01,-1.10584605e+00, 3.46574718e-01, 1.71164543e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-2.61096362e-02, 1.27056008e+00, 2.09994348e-01, 1.04339416e+01],
				 [-1.87528521e-01, 2.62012356e-01,-9.61359179e-01,-4.76553014e+01],
				 [-9.81912084e-01,-8.38248682e-02, 1.78019389e-01, 9.19383430e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 5.61976350e-01,-1.05172209e+00, 1.72261675e-01, 8.75465057e+00],
				 [ 7.73494088e-01, 7.64120828e-01, 2.37097854e-01, 1.20497428e+01],
				 [-2.93069065e-01,-3.48066795e-16, 9.56091273e-01, 4.74787397e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 7.51946366e-01, 5.56906872e-16,-6.59224289e-01,-3.25574308e+01],
				 [-3.46574718e-01,-1.10584605e+00,-3.95321599e-01,-1.97837349e+01],
				 [-5.60769674e-01, 6.83450446e-01,-6.39643784e-01,-3.20107554e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 7.47435343e-01, 5.75370860e-01,-4.95430996e-01,-2.48654876e+01],
				 [ 4.21901451e-01, 3.37766965e-01, 8.68615190e-01, 4.29662079e+01],
				 [ 5.13166225e-01,-1.11573377e+00, 7.46858954e-03, 1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.18641854,  0.64181322, -0.84941509,-42.09861964],
				 [ -0.86343815, -0.42921702, -0.38139788,-19.24683651],
				 [ -0.46874586,  1.04587215,  0.36473231, 17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.86418543e-01,-6.41813215e-01, 8.49415090e-01, 4.20986196e+01],
				 [-3.31177603e-02, 1.12740817e+00, 4.96792817e-01, 2.46495662e+01],
				 [-9.81912084e-01, 8.38248682e-02,-1.78019389e-01,-9.19383430e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.74743534, -0.57537086, -0.495431  ,-24.86548762],
				 [ -0.27030976, -1.1489966 ,  0.38177641, 19.05018218],
				 [ -0.60685504, -0.19686335, -0.7802531 ,-38.51258967],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-2.61096362e-02, 1.27056008e+00,-2.09994348e-01,-1.04339416e+01],
				 [-7.94383563e-01,-1.92150729e-01,-5.89158277e-01,-2.95353141e+01],
				 [-6.06855042e-01, 1.96863355e-01, 7.80253099e-01, 3.85125897e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.87878498,  0.60654084,  0.10024724,  5.29564038],
				 [  0.08952249, -0.47776529,  0.92570018, 45.98576611],
				 [  0.46874586, -1.04587215, -0.36473231,-17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 8.52675345e-01,-6.64019244e-01, 1.09747103e-01, 5.13830127e+00],
				 [-9.80060281e-02, 6.49352918e-02, 9.93931483e-01, 4.93759593e+01],
				 [-5.13166225e-01,-1.11573377e+00,-7.46858954e-03,-1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 8.09016994e-01, 4.49001481e-01,-4.75605071e-01,-2.36067348e+01],
				 [-5.87785252e-01, 6.17997520e-01,-6.54614221e-01,-3.24918829e+01],
				 [-3.00890783e-16, 1.05189198e+00, 5.87605342e-01, 2.91658864e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.8120489 ,  0.65      ,  0.30095945, 14.71092718],
				 [  0.42929876,  0.2111978 ,  0.88843085, 44.34733973],
				 [  0.3953216 ,  1.10584605, -0.34657472,-17.11645428],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.18641854,  0.64181322,  0.84941509, 42.09861964],
				 [  0.86343815, -0.42921702,  0.38139788, 19.24683651],
				 [  0.46874586,  1.04587215, -0.36473231,-17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.        ,  0.49319363, -0.92524107,-45.92449029],
				 [  0.85065081, -0.63235642, -0.19945172, -9.8998184 ],
				 [ -0.52573111, -1.02317418, -0.32271966,-16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 8.09016994e-01,-4.49001481e-01, 4.75605071e-01, 2.36067348e+01],
				 [ 5.87785252e-01, 6.17997520e-01,-6.54614221e-01,-3.24918829e+01],
				 [-6.01781567e-16, 1.05189198e+00, 5.87605342e-01, 2.91658864e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.76357199,-0.20987845, 0.62521464,31.31401819],
				 [-0.44411163, 0.74303599, 0.68998333,34.09056696],
				 [-0.46874586,-1.04587215, 0.36473231,17.93563456],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.4458038 ,-1.14084806, 0.17640955, 8.91918592],
				 [ 0.83706165,-0.44054563, 0.42951984,21.01800651],
				 [-0.31715417, 0.44089142, 0.88565929,44.08075548],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.87878498, -0.60654084,  0.10024724,  5.29564038],
				 [  0.08952249, -0.47776529, -0.92570018,-45.98576611],
				 [  0.46874586, -1.04587215,  0.36473231, 17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.59224289e-01,-1.39226718e-16, 7.51946366e-01, 3.76308999e+01],
				 [-6.39643784e-01,-6.83450446e-01, 5.60769674e-01, 2.76950048e+01],
				 [ 3.95321599e-01,-1.10584605e+00,-3.46574718e-01,-1.71164543e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.90929684, -0.40172209, -0.27872524,-14.16532218],
				 [ -0.13000038, -0.55292303,  0.89565518, 44.52461754],
				 [ -0.3953216 ,  1.10584605,  0.34657472, 17.11645428],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.93385389, -0.06644236, -0.35398409,-17.23313202],
				 [  0.16531834,  1.22114707,  0.30050438, 14.97757109],
				 [  0.31715417, -0.44089142,  0.88565929, 44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.00000000e-01, 2.73122496e-02, 8.65770526e-01, 4.29726604e+01],
				 [-1.62459848e-01, 1.27358713e+00,-1.17597542e-01,-5.83697306e+00],
				 [-8.50650808e-01,-2.59287235e-01,-4.86428015e-01,-2.41439334e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.00000000e+00, 3.92538461e-16,-1.00000000e+00,-4.95732849e+01],
				 [-8.50650808e-01, 6.83450446e-01, 1.58745909e-16, 7.99360578e-15],
				 [ 5.25731112e-01, 1.10584605e+00, 2.56856276e-16, 1.26565425e-14],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.80901699, -0.65      , -0.30901699,-15.31898749],
				 [  0.58778525, -0.89464825, -0.4253254 ,-21.08477742],
				 [  0.        , -0.68345045,  0.85065081, 42.16955483],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.70281901e-01,-1.43436099e-01,-9.79198734e-01,-4.85471502e+01],
				 [-8.41227971e-01,-6.51585938e-01, 2.02766022e-01, 1.03711956e+01],
				 [-5.13166225e-01, 1.11573377e+00,-7.46858954e-03,-1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 7.47435343e-01,-5.75370860e-01, 4.95430996e-01, 2.48654876e+01],
				 [-4.21901451e-01, 3.37766965e-01, 8.68615190e-01, 4.29662079e+01],
				 [-5.13166225e-01,-1.11573377e+00, 7.46858954e-03, 1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.80901699, -0.44900148,  0.47560507, 23.60673476],
				 [  0.26286556,  0.66446389,  0.81832258, 40.61757362],
				 [ -0.52573111,  1.02317418, -0.32271966,-16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.56197635, 1.05172209, 0.17226167, 8.75465057],
				 [-0.60804601, 0.34172522, 0.74912065,37.07746696],
				 [ 0.56076967,-0.68345045, 0.63964378,32.01075544],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.40462588,  0.65      , -0.76568786,-37.96810236],
				 [  0.82462036, -0.2111978 , -0.54185613,-27.23088545],
				 [ -0.3953216 , -1.10584605, -0.34657472,-17.11645428],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.32222347e-01,-4.99034846e-01,-6.73005539e-01,-3.31794337e+01],
				 [ 5.80478535e-01,-4.42834474e-01, 7.39599733e-01, 3.69257724e+01],
				 [-5.13166225e-01,-1.11573377e+00, 7.46858954e-03, 1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.40462588,  0.65      , -0.76568786,-37.96810236],
				 [ -0.72236782,  0.89464825,  0.06766042,  3.13139993],
				 [  0.56076967,  0.68345045,  0.63964378, 32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.76357199, -0.20987845, -0.62521464,-31.31401819],
				 [  0.44411163,  0.74303599, -0.68998333,-34.09056696],
				 [  0.46874586, -1.04587215, -0.36473231,-17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.08910336,  0.8738977 ,  0.73496174, 36.45231946],
				 [  0.95296065, -0.3538082 ,  0.13339736,  6.27591076],
				 [  0.28970087,  0.89505451, -0.66485817,-33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 7.47435343e-01,-5.75370860e-01, 4.95430996e-01, 2.48654876e+01],
				 [ 4.21901451e-01,-3.37766965e-01,-8.68615190e-01,-4.29662079e+01],
				 [ 5.13166225e-01, 1.11573377e+00,-7.46858954e-03,-1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.30901699,-0.72649966, 0.76954517,38.1964992 ],
				 [ 0.4253254 , 1.04640737, 0.41374874,20.53648561],
				 [-0.85065081, 0.25928724, 0.48642802,24.14393335],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.40462588, -0.65      , -0.76568786,-37.96810236],
				 [ -0.72236782,  0.89464825, -0.06766042, -3.13139993],
				 [  0.56076967,  0.68345045, -0.63964378,-32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.56197635, 1.05172209,-0.17226167,-8.75465057],
				 [-0.60804601,-0.34172522, 0.74912065,37.07746696],
				 [ 0.56076967, 0.68345045, 0.63964378,32.01075544],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-8.09016994e-01, 6.50000000e-01,-3.09016994e-01,-1.53189875e+01],
				 [ 2.62865556e-01,-2.11197803e-01,-9.51056516e-01,-4.71469956e+01],
				 [-5.25731112e-01,-1.10584605e+00,-5.55111512e-17,-2.22044605e-16],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 7.63571985e-01, 2.09878454e-01, 6.25214641e-01, 3.13140182e+01],
				 [ 2.20646281e-01,-1.26775228e+00,-1.76565727e-02,-7.96354213e-01],
				 [ 6.06855042e-01, 1.96863355e-01,-7.80253099e-01,-3.85125897e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.4458038 , 1.14084806, 0.17640955, 8.91918592],
				 [-0.65801666,-0.59136327, 0.60007064,30.02748804],
				 [ 0.60685504, 0.19686335, 0.7802531 ,38.51258967],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.57350470e-01,-4.01722093e-01,-9.37949533e-01,-4.67227529e+01],
				 [-5.11262668e-02, 1.23637347e+00,-3.04758277e-01,-1.51811427e+01],
				 [ 9.86218502e-01, 6.14918005e-16,-1.65448075e-01,-7.91126992e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-9.09296836e-01,-4.01722093e-01, 2.78725244e-01, 1.41653222e+01],
				 [-2.95448452e-01, 1.23637347e+00, 9.05633218e-02, 4.60259218e+00],
				 [-2.93069065e-01, 6.49724684e-16,-9.56091273e-01,-4.74787397e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-2.34093766e-15, 1.30000000e+00, 2.94320494e-16, 1.45904337e-14],
				 [-5.25731112e-01,-1.27444173e-15,-8.50650808e-01,-4.21695548e+01],
				 [-8.50650808e-01,-2.78987014e-15, 5.25731112e-01, 2.60622182e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.1702819 , -0.1434361 , -0.97919873,-48.54715021],
				 [ -0.08278124, -1.28934071,  0.09735983,  4.80302981],
				 [ -0.98191208,  0.08382487, -0.17801939, -9.1938343 ],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 8.09016994e-01, 6.50000000e-01,-3.09016994e-01,-1.53189875e+01],
				 [ 5.87785252e-01,-8.94648248e-01, 4.25325404e-01, 2.10847774e+01],
				 [-5.70009187e-16,-6.83450446e-01,-8.50650808e-01,-4.21695548e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.86418543e-01,-6.41813215e-01,-8.49415090e-01,-4.20986196e+01],
				 [ 3.31177603e-02, 1.12740817e+00,-4.96792817e-01,-2.46495662e+01],
				 [ 9.81912084e-01, 8.38248682e-02, 1.78019389e-01, 9.19383430e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-3.09016994e-01,-1.05172209e+00, 5.00000000e-01, 2.47866424e+01],
				 [ 9.51056516e-01,-3.41725223e-01, 1.62459848e-01, 8.05366833e+00],
				 [ 5.70009187e-16, 6.83450446e-01, 8.50650808e-01, 4.21695548e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.76357199, -0.20987845, -0.62521464,-31.31401819],
				 [ -0.44411163, -0.74303599,  0.68998333, 34.09056696],
				 [ -0.46874586,  1.04587215,  0.36473231, 17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.30901699, -1.21969329,  0.1556959 ,  7.72799108],
				 [ -0.95105652,  0.39630237, -0.05058866, -2.51097652],
				 [  0.        , -0.21282086, -0.98650878,-48.96552319],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.48805008,  0.91496133,  0.51618754, 25.80165814],
				 [  0.823335  , -0.22742733, -0.5399204 ,-26.50345425],
				 [ -0.28970087,  0.89505451, -0.66485817,-33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.00000000e+00,-1.30000000e+00, 1.07135978e-15, 5.33098637e-14],
				 [ 1.65448075e-01, 1.37357329e-15, 9.86218502e-01, 4.91272097e+01],
				 [-9.86218502e-01, 2.30430737e-16, 1.65448075e-01, 7.91126992e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.80901699,  0.75381191, -0.09622536, -4.77616115],
				 [  0.58778525, -1.03753308,  0.13244284,  6.57382186],
				 [  0.        , -0.21282086, -0.98650878,-48.96552319],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.93385389, -0.06644236,  0.35398409, 17.23313202],
				 [ -0.16531834,  1.22114707, -0.30050438,-14.97757109],
				 [ -0.31715417, -0.44089142, -0.88565929,-44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.40462588,-0.65      , 0.76568786,37.96810236],
				 [ 0.82462036, 0.2111978 , 0.54185613,27.23088545],
				 [-0.3953216 , 1.10584605, 0.34657472,17.11645428],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.30901699,  0.72649966, -0.76954517,-38.1964992 ],
				 [  0.4253254 , -1.04640737, -0.41374874,-20.53648561],
				 [ -0.85065081, -0.25928724, -0.48642802,-24.14393335],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 3.56700444e-01,-2.66950363e-01,-9.11371294e-01,-4.53715054e+01],
				 [ 7.80656915e-01,-6.11453721e-01, 4.11517417e-01, 2.01448254e+01],
				 [-5.13166225e-01,-1.11573377e+00,-7.46858954e-03,-1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.56197635, -1.05172209,  0.17226167,  8.75465057],
				 [ -0.60804601,  0.34172522, -0.74912065,-37.07746696],
				 [  0.56076967, -0.68345045, -0.63964378,-32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 8.09016994e-01, 6.50000000e-01, 3.09016994e-01, 1.53189875e+01],
				 [-2.62865556e-01,-2.11197803e-01, 9.51056516e-01, 4.71469956e+01],
				 [ 5.25731112e-01,-1.10584605e+00, 2.77555756e-17,-4.21884749e-15],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.85267534,  0.66401924, -0.1097471 , -5.13830127],
				 [ -0.4151602 , -1.02698257, -0.45117978,-22.2464904 ],
				 [ -0.31715417, -0.44089142,  0.88565929, 44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.30901699,  1.05172209,  0.5       , 24.78664243],
				 [  0.95105652, -0.34172522, -0.16245985, -8.05366833],
				 [  0.        ,  0.68345045, -0.85065081,-42.16955483],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.00000000e+00,-3.85880820e-16,-4.92583350e-17, 0.00000000e+00],
				 [-3.00890783e-16,-1.28246142e+00,-1.63708354e-01,-8.12569069e+00],
				 [ 0.00000000e+00, 2.12820861e-01,-9.86508781e-01,-4.89655232e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.80901699,  0.44900148, -0.47560507,-23.60673476],
				 [  0.26286556, -0.66446389, -0.81832258,-40.61757362],
				 [ -0.52573111, -1.02317418,  0.32271966, 16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 2.61096362e-02,-1.27056008e+00,-2.09994348e-01,-1.04339416e+01],
				 [-7.94383563e-01,-1.92150729e-01, 5.89158277e-01, 2.95353141e+01],
				 [-6.06855042e-01, 1.96863355e-01,-7.80253099e-01,-3.85125897e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.85267534, -0.66401924,  0.1097471 ,  5.13830127],
				 [ -0.4151602 ,  1.02698257,  0.45117978, 22.2464904 ],
				 [ -0.31715417,  0.44089142, -0.88565929,-44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.08910336,  0.8738977 ,  0.73496174, 36.45231946],
				 [  0.16706062,  0.95878893, -0.65432433,-32.42103168],
				 [ -0.98191208,  0.08382487, -0.17801939, -9.1938343 ],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 5.61976350e-01, 1.05172209e+00,-1.72261675e-01,-8.75465057e+00],
				 [ 7.73494088e-01,-7.64120828e-01,-2.37097854e-01,-1.20497428e+01],
				 [-2.93069065e-01,-2.78453436e-16,-9.56091273e-01,-4.74787397e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-6.58331983e-01, 7.71525234e-01, 4.63011192e-01, 2.27454921e+01],
				 [-6.82650887e-01,-9.48874896e-01,-3.50465226e-02,-1.98772869e+00],
				 [ 3.17154169e-01,-4.40891421e-01, 8.85659290e-01, 4.40807555e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.30901699, -0.72649966,  0.76954517, 38.1964992 ],
				 [ -0.4253254 , -1.04640737, -0.41374874,-20.53648561],
				 [  0.85065081, -0.25928724, -0.48642802,-24.14393335],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.63222235, -0.49903485, -0.67300554,-33.17943372],
				 [  0.71858772, -0.79990103, -0.32407895,-16.34881733],
				 [ -0.28970087, -0.89505451,  0.66485817, 33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-7.47435343e-01,-5.75370860e-01,-4.95430996e-01,-2.48654876e+01],
				 [ 4.21901451e-01, 3.37766965e-01,-8.68615190e-01,-4.29662079e+01],
				 [ 5.13166225e-01,-1.11573377e+00,-7.46858954e-03,-1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.93385389,-0.06644236, 0.35398409,17.23313202],
				 [ 0.16531834,-1.22114707, 0.30050438,14.97757109],
				 [ 0.31715417, 0.44089142, 0.88565929,44.08075548],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.08910336, 0.8738977 , 0.73496174,36.45231946],
				 [-0.16706062,-0.95878893, 0.65432433,32.42103168],
				 [ 0.98191208,-0.08382487, 0.17801939, 9.1938343 ],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.30901699, -0.72649966, -0.76954517,-38.1964992 ],
				 [  0.4253254 , -1.04640737,  0.41374874, 20.53648561],
				 [ -0.85065081, -0.25928724,  0.48642802, 24.14393335],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.00000000e+00, 2.04221609e-15,-3.97095003e-16,-1.59872116e-14],
				 [-6.01781567e-16, 7.63886945e-01, 8.09147676e-01, 4.01621760e+01],
				 [ 1.50445392e-15,-1.05189198e+00, 5.87605342e-01, 2.91658864e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.8120489 , -0.65      , -0.30095945,-14.71092718],
				 [  0.42929876, -0.2111978 , -0.88843085,-44.34733973],
				 [  0.3953216 , -1.10584605,  0.34657472, 17.11645428],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.48805008, 0.91496133, 0.51618754,25.80165814],
				 [-0.62732294,-0.90226968, 0.35320748,17.76165399],
				 [ 0.60685504,-0.19686335, 0.7802531 ,38.51258967],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.70281901e-01, 1.43436099e-01, 9.79198734e-01, 4.85471502e+01],
				 [ 8.41227971e-01,-6.51585938e-01, 2.02766022e-01, 1.03711956e+01],
				 [ 5.13166225e-01, 1.11573377e+00,-7.46858954e-03,-1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.30901699,  1.21969329,  0.1556959 ,  7.72799108],
				 [  0.4253254 ,  0.36758457, -0.85973634,-42.67315253],
				 [ -0.85065081, -0.25928724, -0.48642802,-24.14393335],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.57350470e-01, 4.01722093e-01,-9.37949533e-01,-4.67227529e+01],
				 [ 9.04965006e-01, 5.52923025e-01,-1.16892119e-02,-2.86841523e-01],
				 [ 3.95321599e-01,-1.10584605e+00,-3.46574718e-01,-1.71164543e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.48805008,  0.91496133, -0.51618754,-25.80165814],
				 [ -0.823335  , -0.22742733,  0.5399204 , 26.50345425],
				 [  0.28970087,  0.89505451,  0.66485817, 33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.80901699, -0.44900148, -0.47560507,-23.60673476],
				 [ -0.58778525,  0.61799752,  0.65461422, 32.49188292],
				 [  0.        ,  1.05189198, -0.58760534,-29.16588638],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.00000000e+00,-3.93085811e-15,-5.28600267e-16,-5.32907052e-15],
				 [ 2.85004593e-15, 1.10584605e+00, 5.25731112e-01, 2.60622182e+01],
				 [-1.14001837e-15,-6.83450446e-01, 8.50650808e-01, 4.21695548e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.13134964, -1.1819117 , -0.39518375,-19.56984724],
				 [ -0.1363669 ,  0.53484403, -0.90118749,-44.68686572],
				 [  0.98191208, -0.08382487, -0.17801939, -9.1938343 ],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.93385389,  0.06644236, -0.35398409,-17.23313202],
				 [ -0.2097387 , -0.94045885, -0.65776811,-32.72885288],
				 [ -0.28970087,  0.89505451, -0.66485817,-33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-7.63571985e-01, 2.09878454e-01,-6.25214641e-01,-3.13140182e+01],
				 [ 2.20646281e-01, 1.26775228e+00,-1.76565727e-02,-7.96354213e-01],
				 [ 6.06855042e-01,-1.96863355e-01,-7.80253099e-01,-3.85125897e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.74743534, -0.57537086, -0.495431  ,-24.86548762],
				 [  0.27030976,  1.1489966 , -0.38177641,-19.05018218],
				 [  0.60685504,  0.19686335,  0.7802531 , 38.51258967],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.80901699,  0.44900148,  0.47560507, 23.60673476],
				 [  0.26286556,  0.66446389, -0.81832258,-40.61757362],
				 [ -0.52573111,  1.02317418,  0.32271966, 16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.74743534,  0.57537086,  0.495431  , 24.86548762],
				 [  0.27030976, -1.1489966 ,  0.38177641, 19.05018218],
				 [  0.60685504, -0.19686335, -0.7802531 ,-38.51258967],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.13134964,  1.1819117 ,  0.39518375, 19.56984724],
				 [  0.1363669 ,  0.53484403, -0.90118749,-44.68686572],
				 [ -0.98191208, -0.08382487, -0.17801939, -9.1938343 ],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.13134964, -1.1819117 , -0.39518375,-19.56984724],
				 [  0.1363669 , -0.53484403,  0.90118749, 44.68686572],
				 [ -0.98191208,  0.08382487,  0.17801939,  9.1938343 ],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.5       , -0.77069181, -0.63130097,-31.33472584],
				 [ -0.16245985, -1.01429989,  0.60402556, 29.98090641],
				 [ -0.85065081, -0.25928724, -0.48642802,-24.14393335],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 3.09016994e-01, 1.05172209e+00,-5.00000000e-01,-2.47866424e+01],
				 [-4.25325404e-01, 7.64120828e-01, 6.88190960e-01, 3.41158865e+01],
				 [ 8.50650808e-01, 6.05576787e-16, 5.25731112e-01, 2.60622182e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-9.02672350e-16,-1.20281339e+00, 3.79379715e-01, 1.88305736e+01],
				 [ 5.25731112e-01,-4.19535559e-01,-7.87057062e-01,-3.90657048e+01],
				 [ 8.50650808e-01, 2.59287235e-01, 4.86428015e-01, 2.41439334e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.00000000e+00,-3.85880820e-16, 4.92583350e-17,-9.32587341e-15],
				 [ 3.00890783e-16,-1.28246142e+00, 1.63708354e-01, 8.12569069e+00],
				 [ 0.00000000e+00, 2.12820861e-01, 9.86508781e-01, 4.89655232e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 5.00000000e-01, 2.73122496e-02,-8.65770526e-01,-4.29726604e+01],
				 [-1.62459848e-01,-1.27358713e+00,-1.17597542e-01,-5.83697306e+00],
				 [-8.50650808e-01, 2.59287235e-01,-4.86428015e-01,-2.41439334e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 9.72479385e-02, 1.05172209e+00, 5.79684691e-01, 2.88762494e+01],
				 [ 1.33850304e-01,-7.64120828e-01, 7.97867529e-01, 3.97447475e+01],
				 [ 9.86218502e-01,-4.64089060e-17,-1.65448075e-01,-7.91126992e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.56197635,  1.05172209, -0.17226167, -8.75465057],
				 [  0.60804601,  0.34172522, -0.74912065,-37.07746696],
				 [ -0.56076967, -0.68345045, -0.63964378,-32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 8.52675345e-01, 6.64019244e-01,-1.09747103e-01,-5.13830127e+00],
				 [-9.80060281e-02,-6.49352918e-02,-9.93931483e-01,-4.93759593e+01],
				 [-5.13166225e-01, 1.11573377e+00, 7.46858954e-03, 1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.00000000e-01,-2.73122496e-02, 8.65770526e-01, 4.29726604e+01],
				 [ 6.88190960e-01,-8.01479032e-01, 3.82483224e-01, 1.89846168e+01],
				 [ 5.25731112e-01, 1.02317418e+00, 3.22719661e-01, 1.60182427e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-9.72479385e-02,-1.05172209e+00, 5.79684691e-01, 2.88762494e+01],
				 [ 1.33850304e-01,-7.64120828e-01,-7.97867529e-01,-3.97447475e+01],
				 [ 9.86218502e-01, 6.49724684e-16, 1.65448075e-01, 7.91126992e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 9.09296836e-01,-4.01722093e-01,-2.78725244e-01,-1.41653222e+01],
				 [-2.95448452e-01,-1.23637347e+00, 9.05633218e-02, 4.60259218e+00],
				 [-2.93069065e-01, 2.78453436e-16,-9.56091273e-01,-4.74787397e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 3.09016994e-01, 1.05172209e+00,-5.00000000e-01,-2.47866424e+01],
				 [ 4.25325404e-01,-7.64120828e-01,-6.88190960e-01,-3.41158865e+01],
				 [-8.50650808e-01, 6.05576787e-16,-5.25731112e-01,-2.60622182e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 7.51946366e-01, 2.32044530e-16,-6.59224289e-01,-3.25574308e+01],
				 [ 3.46574718e-01, 1.10584605e+00, 3.95321599e-01, 1.97837349e+01],
				 [ 5.60769674e-01,-6.83450446e-01, 6.39643784e-01, 3.20107554e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-7.51946366e-01,-4.17680154e-16, 6.59224289e-01, 3.25574308e+01],
				 [-3.46574718e-01, 1.10584605e+00,-3.95321599e-01,-1.97837349e+01],
				 [-5.60769674e-01,-6.83450446e-01,-6.39643784e-01,-3.20107554e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.70281901e-01, 1.43436099e-01,-9.79198734e-01,-4.85471502e+01],
				 [-8.41227971e-01,-6.51585938e-01,-2.02766022e-01,-1.03711956e+01],
				 [-5.13166225e-01, 1.11573377e+00, 7.46858954e-03, 1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-9.02672350e-16, 1.20281339e+00,-3.79379715e-01,-1.88305736e+01],
				 [ 5.25731112e-01, 4.19535559e-01, 7.87057062e-01, 3.90657048e+01],
				 [ 8.50650808e-01,-2.59287235e-01,-4.86428015e-01,-2.41439334e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.18641854,  0.64181322,  0.84941509, 42.09861964],
				 [ -0.86343815,  0.42921702, -0.38139788,-19.24683651],
				 [ -0.46874586, -1.04587215,  0.36473231, 17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.4458038 ,  1.14084806, -0.17640955, -8.91918592],
				 [  0.65801666, -0.59136327, -0.60007064,-30.02748804],
				 [ -0.60685504,  0.19686335, -0.7802531 ,-38.51258967],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.57350470e-01,-4.01722093e-01, 9.37949533e-01, 4.67227529e+01],
				 [ 5.11262668e-02, 1.23637347e+00, 3.04758277e-01, 1.51811427e+01],
				 [-9.86218502e-01, 3.36464569e-16, 1.65448075e-01, 7.91126992e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.09724794,  1.05172209, -0.57968469,-28.87624936],
				 [  0.82224097,  0.34172522,  0.50479846, 24.85044638],
				 [  0.56076967, -0.68345045, -0.63964378,-32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.40462588,  0.65      ,  0.76568786, 37.96810236],
				 [  0.72236782,  0.89464825, -0.06766042, -3.13139993],
				 [ -0.56076967,  0.68345045, -0.63964378,-32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.8120489 , -0.65      ,  0.30095945, 14.71092718],
				 [ -0.16159815,  0.89464825,  0.70730421, 35.14215537],
				 [ -0.56076967,  0.68345045, -0.63964378,-32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-3.09016994e-01, 7.26499657e-01,-7.69545170e-01,-3.81964992e+01],
				 [-9.51056516e-01,-2.36054048e-01, 2.50040383e-01, 1.24107949e+01],
				 [-6.01781567e-16, 1.05189198e+00, 5.87605342e-01, 2.91658864e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.00000000e-01,-2.73122496e-02, 8.65770526e-01, 4.29726604e+01],
				 [-6.88190960e-01, 8.01479032e-01,-3.82483224e-01,-1.89846168e+01],
				 [-5.25731112e-01,-1.02317418e+00,-3.22719661e-01,-1.60182427e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.08910336, -0.8738977 , -0.73496174,-36.45231946],
				 [ -0.95296065, -0.3538082 ,  0.13339736,  6.27591076],
				 [ -0.28970087,  0.89505451, -0.66485817,-33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.4458038 , 1.14084806,-0.17640955,-8.91918592],
				 [-0.65801666, 0.59136327, 0.60007064,30.02748804],
				 [ 0.60685504,-0.19686335, 0.7802531 ,38.51258967],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.8120489 ,  0.65      ,  0.30095945, 14.71092718],
				 [ -0.16159815,  0.89464825, -0.70730421,-35.14215537],
				 [ -0.56076967,  0.68345045,  0.63964378, 32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 9.72479385e-02,-1.05172209e+00,-5.79684691e-01,-2.88762494e+01],
				 [-1.33850304e-01,-7.64120828e-01, 7.97867529e-01, 3.97447475e+01],
				 [-9.86218502e-01, 6.72929137e-16,-1.65448075e-01,-7.91126992e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.58331983e-01, 7.71525234e-01,-4.63011192e-01,-2.27454921e+01],
				 [-6.82650887e-01, 9.48874896e-01,-3.50465226e-02,-1.98772869e+00],
				 [ 3.17154169e-01, 4.40891421e-01, 8.85659290e-01, 4.40807555e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.87878498,  0.60654084, -0.10024724, -5.29564038],
				 [ -0.08952249, -0.47776529, -0.92570018,-45.98576611],
				 [ -0.46874586, -1.04587215,  0.36473231, 17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.57350470e-01,-4.01722093e-01,-9.37949533e-01,-4.67227529e+01],
				 [ 5.11262668e-02,-1.23637347e+00, 3.04758277e-01, 1.51811427e+01],
				 [-9.86218502e-01,-9.86189253e-16, 1.65448075e-01, 7.91126992e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.18641854, -0.64181322, -0.84941509,-42.09861964],
				 [ -0.86343815, -0.42921702,  0.38139788, 19.24683651],
				 [ -0.46874586,  1.04587215, -0.36473231,-17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.57350470e-01, 4.01722093e-01, 9.37949533e-01, 4.67227529e+01],
				 [ 9.04965006e-01,-5.52923025e-01,-1.16892119e-02,-2.86841523e-01],
				 [ 3.95321599e-01, 1.10584605e+00,-3.46574718e-01,-1.71164543e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.48805008, 0.91496133, 0.51618754,25.80165814],
				 [-0.823335  , 0.22742733, 0.5399204 ,26.50345425],
				 [ 0.28970087,-0.89505451, 0.66485817,33.10985999],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-9.02672350e-16,-1.20281339e+00, 3.79379715e-01, 1.88305736e+01],
				 [-5.25731112e-01, 4.19535559e-01, 7.87057062e-01, 3.90657048e+01],
				 [-8.50650808e-01,-2.59287235e-01,-4.86428015e-01,-2.41439334e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 5.00000000e-01,-2.73122496e-02,-8.65770526e-01,-4.29726604e+01],
				 [-6.88190960e-01,-8.01479032e-01,-3.82483224e-01,-1.89846168e+01],
				 [-5.25731112e-01, 1.02317418e+00,-3.22719661e-01,-1.60182427e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.35670044,  0.26695036, -0.91137129,-45.37150539],
				 [ -0.80811021,  0.72449221, -0.19071629, -9.17392994],
				 [  0.46874586,  1.04587215,  0.36473231, 17.93563456],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.8120489 ,  0.65      , -0.30095945,-14.71092718],
				 [  0.42929876, -0.2111978 ,  0.88843085, 44.34733973],
				 [  0.3953216 , -1.10584605, -0.34657472,-17.11645428],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 2.61096362e-02, 1.27056008e+00, 2.09994348e-01, 1.04339416e+01],
				 [ 7.94383563e-01,-1.92150729e-01, 5.89158277e-01, 2.95353141e+01],
				 [ 6.06855042e-01, 1.96863355e-01,-7.80253099e-01,-3.85125897e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.13134964,  1.1819117 , -0.39518375,-19.56984724],
				 [  0.939234  ,  0.31416476,  0.24379792, 11.7613585 ],
				 [  0.31715417, -0.44089142, -0.88565929,-44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 8.09016994e-01,-4.49001481e-01, 4.75605071e-01, 2.36067348e+01],
				 [-5.87785252e-01,-6.17997520e-01, 6.54614221e-01, 3.24918829e+01],
				 [-6.01781567e-16,-1.05189198e+00,-5.87605342e-01,-2.91658864e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.32222347e-01,-4.99034846e-01,-6.73005539e-01,-3.31794337e+01],
				 [-5.80478535e-01, 4.42834474e-01,-7.39599733e-01,-3.69257724e+01],
				 [ 5.13166225e-01, 1.11573377e+00,-7.46858954e-03,-1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.09724794, -1.05172209,  0.57968469, 28.87624936],
				 [ -0.82224097,  0.34172522,  0.50479846, 24.85044638],
				 [ -0.56076967, -0.68345045, -0.63964378,-32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-6.59224289e-01, 2.32044530e-16,-7.51946366e-01,-3.76308999e+01],
				 [-6.39643784e-01, 6.83450446e-01, 5.60769674e-01, 2.76950048e+01],
				 [ 3.95321599e-01, 1.10584605e+00,-3.46574718e-01,-1.71164543e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 5.00000000e-01, 4.01722093e-01, 8.09016994e-01, 4.01056299e+01],
				 [ 1.62459848e-01,-1.23637347e+00, 2.62865556e-01, 1.30311091e+01],
				 [ 8.50650808e-01, 1.72356470e-15,-5.25731112e-01,-2.60622182e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.80901699, -0.65      ,  0.30901699, 15.31898749],
				 [  0.58778525,  0.89464825, -0.4253254 ,-21.08477742],
				 [  0.        ,  0.68345045,  0.85065081, 42.16955483],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.87878498, -0.60654084,  0.10024724,  5.29564038],
				 [ -0.37922337, -0.72179335,  0.74021221, 36.60757904],
				 [ -0.28970087, -0.89505451, -0.66485817,-33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.00000000e-01,-2.73122496e-02,-8.65770526e-01,-4.29726604e+01],
				 [-1.62459848e-01,-1.27358713e+00, 1.17597542e-01, 5.83697306e+00],
				 [-8.50650808e-01, 2.59287235e-01, 4.86428015e-01, 2.41439334e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.13134964, -1.1819117 , -0.39518375,-19.56984724],
				 [  0.939234  ,  0.31416476, -0.24379792,-11.7613585 ],
				 [  0.31715417, -0.44089142,  0.88565929, 44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.00000000e-01, 4.01722093e-01,-8.09016994e-01,-4.01056299e+01],
				 [ 1.62459848e-01, 1.23637347e+00, 2.62865556e-01, 1.30311091e+01],
				 [ 8.50650808e-01,-1.30431923e-15,-5.25731112e-01,-2.60622182e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.40462588,  0.65      , -0.76568786,-37.96810236],
				 [ -0.82462036,  0.2111978 ,  0.54185613, 27.23088545],
				 [  0.3953216 ,  1.10584605,  0.34657472, 17.11645428],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.5       ,  0.77069181, -0.63130097,-31.33472584],
				 [ -0.16245985, -1.01429989, -0.60402556,-29.98090641],
				 [ -0.85065081, -0.25928724,  0.48642802, 24.14393335],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.09724794, -1.05172209,  0.57968469, 28.87624936],
				 [  0.82224097, -0.34172522, -0.50479846,-24.85044638],
				 [  0.56076967,  0.68345045,  0.63964378, 32.01075544],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.80901699,  0.75381191,  0.09622536,  4.77616115],
				 [  0.26286556, -0.27364613, -0.94159052,-46.73599787],
				 [ -0.52573111,  1.02317418, -0.32271966,-16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.30901699,-0.72649966, 0.76954517,38.1964992 ],
				 [ 0.95105652,-0.23605405, 0.25004038,12.41079492],
				 [ 0.        , 1.05189198, 0.58760534,29.16588638],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 2.29867658e-15,-1.30000000e+00,-2.19311029e-16,-1.16615327e-14],
				 [-9.56091273e-01,-2.94062326e-15, 2.93069065e-01, 1.48943012e+01],
				 [-2.93069065e-01,-6.03186526e-16,-9.56091273e-01,-4.74787397e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.        ,  0.49319363, -0.92524107,-45.92449029],
				 [ -0.85065081,  0.63235642,  0.19945172,  9.8998184 ],
				 [  0.52573111,  1.02317418,  0.32271966, 16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.1702819 ,-0.1434361 , 0.97919873,48.54715021],
				 [-0.08278124, 1.28934071, 0.09735983, 4.80302981],
				 [-0.98191208,-0.08382487,-0.17801939,-9.1938343 ],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.30901699, 1.21969329, 0.1556959 , 7.72799108],
				 [-0.4253254 ,-0.36758457, 0.85973634,42.67315253],
				 [ 0.85065081, 0.25928724, 0.48642802,24.14393335],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.5       ,  0.77069181, -0.63130097,-31.33472584],
				 [  0.68819096,  0.22169515,  0.70520288, 35.00285944],
				 [  0.52573111, -1.02317418, -0.32271966,-16.01824266],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.30901699,  1.21969329, -0.1556959 , -7.72799108],
				 [  0.95105652,  0.39630237, -0.05058866, -2.51097652],
				 [  0.        , -0.21282086, -0.98650878,-48.96552319],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.80901699,-0.75381191,-0.09622536,-4.77616115],
				 [ 0.26286556, 0.27364613, 0.94159052,46.73599787],
				 [-0.52573111,-1.02317418, 0.32271966,16.01824266],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-8.52675345e-01,-6.64019244e-01,-1.09747103e-01,-5.13830127e+00],
				 [-9.80060281e-02,-6.49352918e-02, 9.93931483e-01, 4.93759593e+01],
				 [-5.13166225e-01, 1.11573377e+00,-7.46858954e-03,-1.84352766e-01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.87878498,  0.60654084,  0.10024724,  5.29564038],
				 [ -0.37922337, -0.72179335, -0.74021221,-36.60757904],
				 [ -0.28970087, -0.89505451,  0.66485817, 33.10985999],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-2.79125013e-15, 1.30000000e+00,-2.32826257e-16,-1.24944993e-14],
				 [-9.56091273e-01,-3.55800128e-15,-2.93069065e-01,-1.48943012e+01],
				 [-2.93069065e-01,-7.74053689e-16, 9.56091273e-01, 4.74787397e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.80901699, 0.75381191, 0.09622536, 4.77616115],
				 [-0.26286556, 0.27364613, 0.94159052,46.73599787],
				 [ 0.52573111,-1.02317418, 0.32271966,16.01824266],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.35670044,-0.26695036, 0.91137129,45.37150539],
				 [ 0.80811021, 0.72449221,-0.19071629,-9.17392994],
				 [-0.46874586, 1.04587215, 0.36473231,17.93563456],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.86418543e-01,-6.41813215e-01, 8.49415090e-01, 4.20986196e+01],
				 [ 3.31177603e-02,-1.12740817e+00,-4.96792817e-01,-2.46495662e+01],
				 [ 9.81912084e-01,-8.38248682e-02, 1.78019389e-01, 9.19383430e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.4458038 ,  1.14084806,  0.17640955,  8.91918592],
				 [  0.65801666,  0.59136327, -0.60007064,-30.02748804],
				 [ -0.60685504, -0.19686335, -0.7802531 ,-38.51258967],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.30901699,  1.21969329, -0.1556959 , -7.72799108],
				 [  0.4253254 , -0.36758457, -0.85973634,-42.67315253],
				 [ -0.85065081,  0.25928724, -0.48642802,-24.14393335],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.4458038 ,  1.14084806,  0.17640955,  8.91918592],
				 [  0.83706165, -0.44054563, -0.42951984,-21.01800651],
				 [ -0.31715417,  0.44089142, -0.88565929,-44.08075548],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 5.25731112e-01, 4.44089210e-16,-8.50650808e-01,-4.16525619e+01],
				 [ 4.47213595e-01, 8.50650808e-01, 2.76393202e-01, 1.35337378e+01],
				 [ 7.23606798e-01,-5.25731112e-01, 4.47213595e-01, 2.18980477e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 4.29574234e-01,-6.28284199e-01,-6.52761570e-01,-3.17707252e+01],
				 [ 8.25788232e-01,-1.73310869e-02, 5.55636011e-01, 2.70435023e+01],
				 [-3.65430943e-01,-7.77729737e-01, 5.14947526e-01, 2.50631426e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.58128741, -0.74268996, -0.32672683,-15.90220506],
				 [  0.60523408,  0.12163497,  0.79251412, 38.572657  ],
				 [ -0.54387191, -0.65842469,  0.51494753, 25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-9.51056516e-01,-3.09016994e-01, 9.43220348e-17, 4.61852778e-15],
				 [ 1.38196601e-01,-4.25325404e-01, 8.94427191e-01, 4.37960954e+01],
				 [-2.76393202e-01, 8.50650808e-01, 4.47213595e-01, 2.18980477e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.42122995, -0.63379124, -0.65276157,-31.77072518],
				 [  0.70511691, -0.6786931 ,  0.21209509, 10.32293437],
				 [ -0.57041693, -0.37093242,  0.72726749, 35.39702191],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-4.67086179e-01,-8.09016994e-01,-3.56822090e-01,-1.73179920e+01],
				 [ 6.42888973e-01,-5.87785252e-01, 4.91123473e-01, 2.38361711e+01],
				 [-6.07061998e-01, 2.22044605e-16, 7.94654472e-01, 3.85677350e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-5.40438821e-01,-8.41327756e-01,-2.58520712e-16,-1.25825276e-14],
				 [ 6.18506593e-01,-3.93043586e-01, 6.86354133e-01, 3.34057174e+01],
				 [-5.70416931e-01, 3.70932418e-01, 7.27267492e-01, 3.53970219e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.58128741,  0.74268996, -0.32672683,-15.90220506],
				 [ -0.75712273,  0.64330976,  0.10615998,  5.16693964],
				 [  0.29811091,  0.18566285,  0.93913771, 45.70901138],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 5.40438821e-01, 8.41327756e-01,-6.38698229e-17,-3.10862447e-15],
				 [-7.86800970e-01, 5.07546476e-01, 3.43540920e-01, 1.67205679e+01],
				 [ 2.98110908e-01,-1.85662850e-01, 9.39137709e-01, 4.57090114e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 7.49500320e-16, 1.00000000e+00,-1.19716429e-16,-5.86197757e-15],
				 [-1.00000000e+00, 7.49500320e-16, 1.30599740e-16, 6.39488462e-15],
				 [ 0.00000000e+00, 1.19716429e-16, 1.00000000e+00, 4.89655232e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.58128741,-0.74268996, 0.32672683,15.90220506],
				 [ 0.60523408,-0.12163497, 0.79251412,38.572657  ],
				 [-0.54387191, 0.65842469, 0.51494753,25.06314263],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 4.21229946e-01, 6.33791238e-01, 6.52761570e-01, 3.17707252e+01],
				 [-8.25534282e-01,-2.82512606e-02, 5.55636011e-01, 2.70435023e+01],
				 [ 3.75577531e-01,-7.72927581e-01, 5.14947526e-01, 2.50631426e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.4253254 , 0.30901699, 0.85065081,41.65256188],
				 [-0.8618034 , 0.4253254 , 0.2763932 ,13.53373775],
				 [-0.2763932 ,-0.85065081, 0.4472136 ,21.89804768],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.46708618,-0.80901699, 0.35682209,17.31799203],
				 [ 0.83048145,-0.26286556, 0.49112347,23.83617113],
				 [-0.303531  , 0.52573111, 0.79465447,38.56773504],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.75523951, 0.11382209, 0.65276157,31.77072518],
				 [-0.32285881, 0.92160739, 0.21209509,10.32293437],
				 [-0.57041693,-0.37093242, 0.72726749,35.39702191],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.58128741, 0.74268996, 0.32672683,15.90220506],
				 [-0.75712273,-0.64330976, 0.10615998, 5.16693964],
				 [ 0.29811091,-0.18566285, 0.93913771,45.70901138],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.82164940e-15,-1.00000000e+00, 3.73660369e-16, 1.82964754e-14],
				 [-4.47213595e-01, 4.80454384e-16,-8.94427191e-01,-4.37960954e+01],
				 [ 8.94427191e-01,-1.79643875e-15,-4.47213595e-01,-2.18980477e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 9.97640999e-01,-6.86426628e-02, 3.64970417e-17, 1.77635684e-15],
				 [-5.04630202e-02,-7.25551867e-01,-6.86354133e-01,-3.34057174e+01],
				 [ 4.65394571e-02, 6.84735023e-01,-7.27267492e-01,-3.53970219e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-9.97640999e-01, 6.86426628e-02,-1.21656806e-17,-5.92118946e-16],
				 [ 6.41939046e-02, 9.36922282e-01,-3.43540920e-01,-1.67205679e+01],
				 [-2.43224194e-02,-3.42730507e-01,-9.39137709e-01,-4.57090114e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 9.51056516e-01, 3.09016994e-01, 7.25554114e-18, 3.55271368e-16],
				 [ 3.09016994e-01,-9.51056516e-01,-2.90221646e-17,-1.42108547e-15],
				 [ 0.00000000e+00, 2.98438042e-17,-1.00000000e+00,-4.89655232e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.91811702, -0.21063334, -0.32672683,-15.90220506],
				 [  0.15336678,  0.59217818, -0.79251412,-38.572657  ],
				 [  0.36543094, -0.77772974, -0.51494753,-25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-4.67086179e-01,-8.09016994e-01,-3.56822090e-01,-1.73179920e+01],
				 [-6.42888973e-01, 5.87785252e-01,-4.91123473e-01,-2.38361711e+01],
				 [ 6.07061998e-01, 8.88178420e-16,-7.94654472e-01,-3.85677350e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.5909687 , -0.73494592, -0.32672683,-15.90220506],
				 [ -0.74859534,  0.65321543, -0.10615998, -5.16693964],
				 [  0.3006011 ,  0.18184895, -0.93913771,-45.70901138],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 4.29574234e-01,-6.28284199e-01,-6.52761570e-01,-3.17707252e+01],
				 [-8.25788232e-01, 1.73310869e-02,-5.55636011e-01,-2.70435023e+01],
				 [ 3.65430943e-01, 7.77729737e-01,-5.14947526e-01,-2.50631426e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.75672255, -0.10397162, -0.65276157,-31.77072518],
				 [ -0.3107039 , -0.92579626, -0.21209509,-10.32293437],
				 [ -0.57518176,  0.36331271, -0.72726749,-35.39702191],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-4.25325404e-01,-3.09016994e-01,-8.50650808e-01,-4.16525619e+01],
				 [-1.38196601e-01, 9.51056516e-01,-2.76393202e-01,-1.35337378e+01],
				 [ 8.94427191e-01, 3.46944695e-16,-4.47213595e-01,-2.18980477e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 4.25325404e-01,-3.09016994e-01, 8.50650808e-01, 4.16525619e+01],
				 [-1.38196601e-01,-9.51056516e-01,-2.76393202e-01,-1.35337378e+01],
				 [ 8.94427191e-01,-2.49800181e-16,-4.47213595e-01,-2.18980477e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.75672255, -0.10397162,  0.65276157, 31.77072518],
				 [ -0.3107039 ,  0.92579626, -0.21209509,-10.32293437],
				 [ -0.57518176, -0.36331271, -0.72726749,-35.39702191],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 2.47235992e-01, 9.12277791e-01, 3.26726831e-01, 1.59022051e+01],
				 [ 9.68649980e-01,-2.24241856e-01,-1.06159983e-01,-5.16693964e+00],
				 [-2.43224194e-02, 3.42730507e-01,-9.39137709e-01,-4.57090114e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.75672255,  0.10397162,  0.65276157, 31.77072518],
				 [ -0.3755072 ,  0.73898544, -0.55563601,-27.04350228],
				 [ -0.53513112, -0.66557897, -0.51494753,-25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.46708618,  0.80901699,  0.35682209, 17.31799203],
				 [  0.83048145, -0.26286556, -0.49112347,-23.83617113],
				 [ -0.303531  ,  0.52573111, -0.79465447,-38.56773504],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.24723599, -0.91227779,  0.32672683, 15.90220506],
				 [ -0.45494807, -0.40683149, -0.79251412,-38.572657  ],
				 [  0.85550956,  0.04729427, -0.51494753,-25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.14445469, -0.49614221, -0.85468986,-41.5988284 ],
				 [  0.91546401,  0.39538889, -0.06583535, -3.20428921],
				 [  0.37557753, -0.77292758,  0.51494753, 25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.64549722, -0.5       , -0.57735027,-28.02109972],
				 [  0.70085824, -0.68819096, -0.18759247, -9.10460721],
				 [ -0.303531  , -0.52573111,  0.79465447, 38.56773504],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.8996942 , -0.38232012, -0.20192829, -9.82810322],
				 [  0.31887339,  0.90513377, -0.27793044,-13.52722359],
				 [  0.29811091,  0.18566285,  0.93913771, 45.70901138],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.65496255,  0.16898372, -0.73015567,-35.53759307],
				 [ -0.65571761,  0.61150141, -0.44911217,-21.85885342],
				 [  0.37557753,  0.77292758,  0.51494753, 25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.80077324,  0.44962323, -0.40342884,-19.63538801],
				 [ -0.18272038, -0.81249899, -0.55527216,-27.02579306],
				 [ -0.57041693, -0.37093242,  0.72726749, 35.39702191],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.26286556, -0.80901699, -0.52573111,-25.74269896],
				 [  0.6381966 ,  0.26286556, -0.7236068 ,-35.43178543],
				 [  0.7236068 , -0.52573111,  0.4472136 , 21.89804768],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-3.80904208e-02,-9.78534135e-01,-2.01928286e-01,-9.82810322e+00],
				 [-1.57323853e-01, 2.05794247e-01,-9.64284575e-01,-4.69329410e+01],
				 [ 9.86812204e-01,-4.96186908e-03,-1.71406606e-01,-8.34257473e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.10264090e-01, 8.09016994e-01,-5.77350269e-01,-2.80210997e+01],
				 [ 1.51765500e-01,-5.87785252e-01,-7.94654472e-01,-3.85677350e+01],
				 [-9.82246946e-01, 2.63677968e-16,-1.87592474e-01,-9.10460721e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.39598413,  0.34518555, -0.85468986,-41.5988284 ],
				 [  0.81733142, -0.28983758, -0.49002553,-23.85015796],
				 [ -0.41852828, -0.89260721, -0.17140661, -8.34257473],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 7.94828579e-01, 4.60054583e-01,-4.03428837e-01,-1.96353880e+01],
				 [-4.27955642e-01,-3.73300287e-02,-8.98813078e-01,-4.37463610e+01],
				 [-4.30234237e-01, 8.87051968e-01, 1.71406606e-01, 8.34257473e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.14523726e-01,-6.72344038e-01,-7.30155668e-01,-3.55375931e+01],
				 [ 1.14677637e-01, 7.40132610e-01,-6.61432140e-01,-3.21927327e+01],
				 [ 9.86779284e-01,-7.98285394e-03, 1.71406606e-01, 8.34257473e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-3.56822090e-01,-4.99600361e-16,-9.34172359e-01,-4.53390917e+01],
				 [ 7.94654472e-01,-5.25731112e-01,-3.03530999e-01,-1.47315639e+01],
				 [-4.91123473e-01,-8.50650808e-01, 1.87592474e-01, 9.10460721e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.16005746, -0.10889872, -0.9794884 ,-47.67293024],
				 [ -0.89398864, -0.4373785 , -0.10593511, -5.15599474],
				 [ -0.41852828,  0.89260721, -0.17140661, -8.34257473],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.16005746, -0.10889872, -0.9794884 ,-47.67293024],
				 [  0.89398864,  0.4373785 ,  0.10593511,  5.15599474],
				 [  0.41852828, -0.89260721,  0.17140661,  8.34257473],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.48855955,  0.17365306, -0.85468986,-41.5988284 ],
				 [  0.65022749,  0.58101745,  0.49002553, 23.85015796],
				 [  0.58181937, -0.79514949,  0.17140661,  8.34257473],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.78411045e-01, 3.09016994e-01,-9.34172359e-01,-4.53390917e+01],
				 [ 5.79692625e-02, 9.51056516e-01, 3.03530999e-01, 1.47315639e+01],
				 [ 9.82246946e-01, 6.24500451e-17,-1.87592474e-01,-9.10460721e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.39598413, -0.34518555, -0.85468986,-41.5988284 ],
				 [ -0.7398648 ,  0.66875285,  0.06583535,  3.20428921],
				 [  0.54387191,  0.65842469, -0.51494753,-25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.23288439e-01, 6.70687921e-01,-7.30155668e-01,-3.55375931e+01],
				 [ 1.04888683e-01, 7.41658976e-01, 6.61432140e-01, 3.21927327e+01],
				 [ 9.86812204e-01, 4.96186908e-03,-1.71406606e-01,-8.34257473e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.53021111, -0.43027602, -0.73015567,-35.53759307],
				 [ -0.10141416, -0.88766037,  0.44911217, 21.85885342],
				 [ -0.84177868, -0.16407614, -0.51494753,-25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-8.50650808e-01, 7.49400542e-16,-5.25731112e-01,-2.57426990e+01],
				 [-4.47213595e-01, 5.25731112e-01, 7.23606798e-01, 3.54317854e+01],
				 [ 2.76393202e-01, 8.50650808e-01,-4.47213595e-01,-2.18980477e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.83676994,  0.37093561, -0.40342884,-19.63538801],
				 [ -0.28561392,  0.3318947 ,  0.89881308, 43.74636096],
				 [  0.46716245,  0.86732466, -0.17140661, -8.34257473],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 2.52458163e-02, 9.78976786e-01,-2.01928286e-01,-9.82810322e+00],
				 [-1.60091514e-01, 2.03585950e-01, 9.64284575e-01, 4.69329410e+01],
				 [ 9.86779284e-01, 7.98285394e-03, 1.71406606e-01, 8.34257473e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 1.10264090e-01, 8.09016994e-01,-5.77350269e-01,-2.80210997e+01],
				 [-1.51765500e-01, 5.87785252e-01, 7.94654472e-01, 3.85677350e+01],
				 [ 9.82246946e-01, 8.46545056e-16, 1.87592474e-01, 9.10460721e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.83676994, -0.37093561, -0.40342884,-19.63538801],
				 [ -0.54557323,  0.62733094,  0.55527216, 27.02579306],
				 [  0.04653946,  0.68473502, -0.72726749,-35.39702191],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.11026409,  0.80901699, -0.57735027,-28.02109972],
				 [  0.94641997,  0.26286556,  0.18759247,  9.10460721],
				 [  0.303531  , -0.52573111, -0.79465447,-38.56773504],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-7.69376292e-01,-6.06242181e-01,-2.01928286e-01,-9.82810322e+00],
				 [-6.38332626e-01, 7.17638904e-01, 2.77930443e-01, 1.35272236e+01],
				 [-2.43224194e-02, 3.42730507e-01,-9.39137709e-01,-4.57090114e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.60057464e-01, 1.08898720e-01, 9.79488401e-01, 4.76729302e+01],
				 [-2.54608005e-02,-9.93973770e-01, 1.05935109e-01, 5.15599474e+00],
				 [ 9.86779284e-01,-7.98285394e-03, 1.71406606e-01, 8.34257473e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.16005746,-0.10889872, 0.9794884 ,47.67293024],
				 [-0.89398864, 0.4373785 ,-0.10593511,-5.15599474],
				 [-0.41852828,-0.89260721,-0.17140661,-8.34257473],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.39598413,-0.34518555, 0.85468986,41.5988284 ],
				 [ 0.7398648 , 0.66875285,-0.06583535,-3.20428921],
				 [-0.54387191, 0.65842469, 0.51494753,25.06314263],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.78411045e-01,-3.09016994e-01, 9.34172359e-01, 4.53390917e+01],
				 [ 5.79692625e-02,-9.51056516e-01,-3.03530999e-01,-1.47315639e+01],
				 [ 9.82246946e-01, 3.16413562e-15, 1.87592474e-01, 9.10460721e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.39598413,  0.34518555,  0.85468986, 41.5988284 ],
				 [  0.81733142,  0.28983758, -0.49002553,-23.85015796],
				 [ -0.41852828,  0.89260721, -0.17140661, -8.34257473],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.65496255,  0.16898372,  0.73015567, 35.53759307],
				 [ -0.65571761, -0.61150141, -0.44911217,-21.85885342],
				 [  0.37557753, -0.77292758,  0.51494753, 25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-1.14523726e-01,-6.72344038e-01, 7.30155668e-01, 3.55375931e+01],
				 [ 1.14677637e-01,-7.40132610e-01,-6.61432140e-01,-3.21927327e+01],
				 [ 9.86779284e-01, 7.98285394e-03, 1.71406606e-01, 8.34257473e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.68819096,  0.5       ,  0.52573111, 25.74269896],
				 [ -0.67082039, -0.16245985, -0.7236068 ,-35.43178543],
				 [ -0.2763932 , -0.85065081,  0.4472136 , 21.89804768],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.7774471 ,  0.48200177,  0.40342884, 19.63538801],
				 [ -0.62722411, -0.54663665, -0.55527216,-27.02579306],
				 [ -0.04653946, -0.68473502,  0.72726749, 35.39702191],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.8996942 , -0.38232012,  0.20192829,  9.82810322],
				 [  0.31887339, -0.90513377, -0.27793044,-13.52722359],
				 [  0.29811091, -0.18566285,  0.93913771, 45.70901138],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.11026409, 0.80901699, 0.57735027,28.02109972],
				 [-0.94641997, 0.26286556,-0.18759247,-9.10460721],
				 [-0.303531  ,-0.52573111, 0.79465447,38.56773504],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 6.16568431e-02, 9.12613568e-01, 4.03428837e-01, 1.96353880e+01],
				 [-1.49666659e-01, 4.08676890e-01,-8.98813078e-01,-4.37463610e+01],
				 [-9.86812204e-01,-4.96186908e-03, 1.71406606e-01, 8.34257473e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.64549722, -0.5       ,  0.57735027, 28.02109972],
				 [ -0.58491971, -0.16245985, -0.79465447,-38.56773504],
				 [  0.49112347, -0.85065081, -0.18759247, -9.10460721],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.89457584, -0.39413402,  0.20192829,  9.82810322],
				 [  0.12096513, -0.24021267, -0.96428458,-46.93294095],
				 [  0.43023424,  0.88705197, -0.17140661, -8.34257473],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.06739365,  0.97717779,  0.20150055,  9.80728479],
				 [ -0.51338239,  0.20708984, -0.8332026 ,-40.55301664],
				 [ -0.85550956, -0.04729427,  0.51494753, 25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.832919  , -0.51847955, -0.20150055, -9.80728479],
				 [  0.14099865,  0.53673879, -0.8332026 ,-40.55301664],
				 [  0.53513112,  0.66557897,  0.51494753, 25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-2.30055494e-15,-1.00000000e+00, 3.05002334e-17, 1.48029737e-15],
				 [ 7.94654472e-01,-1.84666180e-15,-6.07061998e-01,-2.94631278e+01],
				 [ 6.07061998e-01,-1.37234233e-15, 7.94654472e-01, 3.85677350e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 8.66025404e-01,-5.00000000e-01, 4.27003268e-17, 2.07241631e-15],
				 [ 9.37962370e-02, 1.62459848e-01,-9.82246946e-01,-4.76723423e+01],
				 [ 4.91123473e-01, 8.50650808e-01, 1.87592474e-01, 9.10460721e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 7.69376292e-01,-6.06242181e-01, 2.01928286e-01, 9.82810322e+00],
				 [-6.38332626e-01,-7.17638904e-01, 2.77930443e-01, 1.35272236e+01],
				 [-2.43224194e-02,-3.42730507e-01,-9.39137709e-01,-4.57090114e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-7.55761314e-01,-3.09016994e-01, 5.77350269e-01, 2.80210997e+01],
				 [-2.45561737e-01, 9.51056516e-01, 1.87592474e-01, 9.10460721e+00],
				 [-6.07061998e-01,-9.71445147e-16,-7.94654472e-01,-3.85677350e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.39598413, -0.34518555,  0.85468986, 41.5988284 ],
				 [ -0.7398648 , -0.66875285,  0.06583535,  3.20428921],
				 [  0.54387191, -0.65842469, -0.51494753,-25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[  0.06165684, -0.91261357,  0.40342884, 19.63538801],
				 [ -0.8156987 ,  0.18720389,  0.55527216, 27.02579306],
				 [ -0.57518176, -0.36331271, -0.72726749,-35.39702191],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.11452373,  0.67234404,  0.73015567, 35.53759307],
				 [  0.83131682, -0.33813745,  0.44911217, 21.85885342],
				 [  0.54387191,  0.65842469, -0.51494753,-25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 2.62865556e-01, 8.09016994e-01, 5.25731112e-01, 2.57426990e+01],
				 [ 3.61803399e-01,-5.87785252e-01, 7.23606798e-01, 3.54317854e+01],
				 [ 8.94427191e-01,-1.16573418e-15,-4.47213595e-01,-2.18980477e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.65496255,-0.16898372, 0.73015567,35.53759307],
				 [ 0.62917259, 0.4178557 , 0.66143214,32.19273269],
				 [-0.41852828, 0.89260721,-0.17140661,-8.34257473],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.17841104, 0.30901699, 0.93417236,45.33909175],
				 [ 0.85262373,-0.4253254 , 0.303531  ,14.73156392],
				 [ 0.49112347, 0.85065081,-0.18759247,-9.10460721],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 0.39598413, 0.34518555, 0.85468986,41.5988284 ],
				 [-0.81733142,-0.28983758, 0.49002553,23.85015796],
				 [ 0.41852828,-0.89260721, 0.17140661, 8.34257473],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.75576131, 0.30901699, 0.57735027,28.02109972],
				 [ 0.43315421,-0.4253254 , 0.79465447,38.56773504],
				 [ 0.49112347, 0.85065081, 0.18759247, 9.10460721],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-0.8996942 , 0.38232012, 0.20192829, 9.82810322],
				 [ 0.12403399,-0.23872623, 0.96428458,46.93294095],
				 [ 0.41852828, 0.89260721, 0.17140661, 8.34257473],
				 [ 0.        , 0.        , 0.        , 1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 8.00773245e-01,-4.49623230e-01, 4.03428837e-01, 1.96353880e+01],
				 [-4.28481377e-01, 3.15885528e-02, 8.98813078e-01, 4.37463610e+01],
				 [-4.18528279e-01,-8.92607208e-01,-1.71406606e-01,-8.34257473e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ 4.14115554e-15, 1.00000000e+00, 5.49004202e-17, 2.66453526e-15],
				 [ 1.87592474e-01,-8.30775384e-16, 9.82246946e-01, 4.76723423e+01],
				 [ 9.82246946e-01,-4.05733848e-15,-1.87592474e-01,-9.10460721e+00],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.06739365, -0.97717779, -0.20150055, -9.80728479],
				 [ -0.53559943, -0.13491467,  0.8332026 , 40.55301664],
				 [ -0.84177868,  0.16407614, -0.51494753,-25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[ -0.832919  , -0.51847955,  0.20150055,  9.80728479],
				 [ -0.14099865,  0.53673879,  0.8332026 , 40.55301664],
				 [ -0.53513112,  0.66557897, -0.51494753,-25.06314263],
				 [  0.        ,  0.        ,  0.        ,  1.        ]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
				multmatrix(m = [[-8.66025404e-01, 5.00000000e-01,-6.17917561e-17,-2.99899914e-15],
				 [ 3.97327236e-01, 6.88190960e-01, 6.07061998e-01, 2.94631278e+01],
				 [ 3.03530999e-01, 5.25731112e-01,-7.94654472e-01,-3.85677350e+01],
				 [ 0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 1.00000000e+00]]) {
					cylinder($fn = 24, center = true, h = 10, r = 3);
				}
			}
		}
		multmatrix(m = [[-1.0000000000, -0.0000000000, 0.0000000000, 0.0000000000], [-0.0000000000, 0.9796038971, -0.2009383108, -10.0439060607], [0.0000000000, 0.2009383108, 0.9796038971, 48.9655231888], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-1.0000000000, -0.0000000000, -0.0000000000, -0.0000000000], [0.0000000000, 0.9188999245, -0.3944907207, -19.7446962729], [-0.0000000000, 0.3944907207, 0.9188999245, 45.9919561234], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8450781032, 0.0000000000, -0.5346428710, -26.7126620912], [0.4655535803, -0.4916819228, -0.7358727815, -36.7668251499], [0.2628742348, 0.8707748772, -0.4155096267, -20.7603408869], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9131943014, 0.0000000000, 0.4075244383, 20.3613724319], [-0.4064721478, -0.0718167006, -0.9108362940, -45.5086254087], [-0.0292670606, 0.9974178470, -0.0655826017, -3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9773543323, -0.0000000000, 0.2116093314, 10.5912807537], [-0.2012601080, 0.3089053536, -0.9295546522, -46.5252370111], [0.0653672553, 0.9510927833, 0.3019099856, 15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9786188929, -0.0000000000, 0.2056819447, 10.2766025411], [-0.2052195587, 0.0670154666, -0.9764188958, -48.7853657781], [0.0137838715, 0.9977519367, 0.0655826017, 3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9773543323, -0.0000000000, 0.2116093314, 10.5912807537], [-0.1484725071, 0.7125365727, -0.6857459786, -34.3223436169], [0.1507793878, 0.7016349710, 0.6964007063, 34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9786188929, -0.0000000000, 0.2056819447, 10.2766025411], [-0.1041056462, 0.8624462343, -0.4953266673, -24.7482845217], [0.1773896187, 0.5061486866, 0.8440061791, 42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3948048212, 0.0000000000, 0.9187650152, 45.9244902867], [0.2270972719, 0.9689704312, 0.0975865388, 4.8778653729], [0.8902561330, -0.2471766645, 0.3825541978, 19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5991237484, 0.0000000000, 0.8006564395, 40.0208304288], [0.1816972277, 0.9739098311, 0.1359623414, 6.7960807406], [0.7797671778, -0.2269353230, 0.5834925086, 29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6859365828, 0.0000000000, 0.7276613253, 36.3721679786], [0.3825541978, 0.8506508084, 0.3606182025, 18.0255090963], [0.6189856946, -0.5257311121, 0.5834925086, 29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9786188929, -0.0000000000, -0.2056819447, -10.2766025411], [0.2052195587, 0.0670154666, -0.9764188958, -48.7853657781], [-0.0137838715, 0.9977519367, 0.0655826017, 3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000], [-0.0000000000, -0.0581013120, -0.9983106919, -49.9665527363], [0.0000000000, 0.9983106919, -0.0581013120, -2.9080348375], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9269507747, 0.0000000000, -0.3751829705, -18.7783220526], [0.3547251361, -0.3257022852, -0.8764063551, -43.8651060392], [0.1221979509, 0.9454723800, -0.3019099856, -15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9131943014, 0.0000000000, -0.4075244383, -20.3613724319], [0.4064721478, -0.0718167006, -0.9108362940, -45.5086254087], [0.0292670606, 0.9974178470, -0.0655826017, -3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9269507747, 0.0000000000, 0.3751829705, 18.7783220526], [-0.3547251361, -0.3257022852, -0.8764063551, -43.8651060392], [-0.1221979509, 0.9454723800, -0.3019099856, -15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8097374849, 0.0000000000, -0.5867923019, -29.3696028063], [-0.2994042812, -0.8600326887, 0.4131595948, 20.6790940411], [0.5046605611, -0.5102389385, -0.6964007063, -34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8231472252, -0.0000000000, -0.5678280071, -28.3828959132], [0.4005195520, 0.7088555859, -0.5806098920, -29.0217987248], [-0.4025080547, 0.7053536406, 0.5834925086, 29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9786188929, -0.0000000000, -0.2056819447, -10.2766025411], [0.1041056462, 0.8624462343, -0.4953266673, -24.7482845217], [-0.1773896187, 0.5061486866, 0.8440061791, 42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-1.0000000000, -0.0000000000, 0.0000000000, 0.0000000000], [-0.0000000000, 0.6277393840, -0.7784235773, -38.8928144632], [0.0000000000, 0.7784235773, 0.6277393840, 31.3640954672], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9773543323, -0.0000000000, -0.2116093314, -10.5912807537], [0.1484725071, 0.7125365727, -0.6857459786, -34.3223436169], [-0.1507793878, 0.7016349710, 0.6964007063, 34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9263254228, -0.0000000000, -0.3767243172, -18.8305736051], [0.2925927870, 0.6299001348, -0.7194548500, -35.9619671229], [-0.2372986982, 0.7766761360, 0.5834925086, 29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-1.0000000000, -0.0000000000, 0.0000000000, 0.0000000000], [-0.0000000000, 0.4155096267, -0.9095887808, -45.4462952022], [0.0000000000, 0.9095887808, 0.4155096267, 20.7603408869], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9773543323, -0.0000000000, -0.2116093314, -10.5912807537], [0.2012601080, 0.3089053536, -0.9295546522, -46.5252370111], [-0.0653672553, 0.9510927833, 0.3019099856, 15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9263254228, -0.0000000000, -0.3767243172, -18.8305736051], [0.3430978803, 0.4129803505, -0.8436415558, -42.1694424482], [-0.1555797406, 0.9107399355, 0.3825541978, 19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3948048212, 0.0000000000, -0.9187650152, -45.9244902867], [0.6947083048, -0.6544182801, -0.2985248497, -14.9217714336], [0.6012566211, 0.7561327361, -0.2583674921, -12.9145049962], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6964822086, 0.0000000000, -0.7175740610, -35.9153742965], [0.6466518839, -0.4334783888, -0.6276446666, -31.4143087794], [0.3110528478, 0.9011639620, -0.3019099856, -15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5991237484, 0.0000000000, -0.8006564395, -40.0208304288], [0.6161874960, -0.6385228408, -0.4610873580, -23.0474621266], [0.5112374242, 0.7696028728, -0.3825541978, -19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8231472252, 0.0000000000, 0.5678280071, 28.3828959132], [0.5391319376, -0.3138776201, 0.7815482029, 39.0657047856], [-0.1782285035, -0.9494634483, -0.2583674921, -12.9145049962], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9773543323, 0.0000000000, -0.2116093314, -10.5912807537], [-0.1484725071, -0.7125365727, 0.6857459786, 34.3223436169], [0.1507793878, -0.7016349710, -0.6964007063, -34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9269507747, 0.0000000000, 0.3751829705, 18.7783220526], [0.0493407336, -0.9913146951, 0.1219043368, 6.1014466971], [-0.3719243920, -0.1315111224, -0.9188999245, -45.9919561234], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9815698547, -0.0000000000, -0.1911036899, -9.5523223081], [0.0120890722, 0.9979971292, -0.0620933529, -3.1037376627], [-0.1907209339, 0.0632592297, 0.9796038971, 48.9655231888], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9263254228, -0.0000000000, 0.3767243172, 18.8305736051], [-0.3430978803, 0.4129803505, -0.8436415558, -42.1694424482], [0.1555797406, 0.9107399355, 0.3825541978, 19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9263254228, -0.0000000000, 0.3767243172, 18.8305736051], [-0.2925927870, 0.6299001348, -0.7194548500, -35.9619671229], [0.2372986982, 0.7766761360, 0.5834925086, 29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8231472252, -0.0000000000, 0.5678280071, 28.3828959132], [-0.4005195520, 0.7088555859, -0.5806098920, -29.0217987248], [0.4025080547, 0.7053536406, 0.5834925086, 29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9815698547, 0.0000000000, -0.1911036899, -9.5523223081], [-0.1759923866, 0.3897371093, 0.9039533536, 45.1841290412], [-0.0744801997, -0.9209261564, 0.3825541978, 19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000], [0.0000000000, 0.2583674921, 0.9660467065, 48.2878667039], [0.0000000000, -0.9660467065, 0.2583674921, 12.9145049962], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9815698547, 0.0000000000, 0.1911036899, 9.5523223081], [0.1759923866, 0.3897371093, 0.9039533536, 45.1841290412], [0.0744801997, -0.9209261564, 0.3825541978, 19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9930006870, 0.0000000000, -0.1181085757, -5.9036598579], [-0.0955672796, 0.5876053424, 0.8034841982, 40.1621760109], [-0.0694012301, -0.8091476760, 0.5834925086, 29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9930006870, 0.0000000000, 0.1181085757, 5.9036598579], [0.0955672796, 0.5876053424, 0.8034841982, 40.1621760109], [0.0694012301, -0.8091476760, 0.5834925086, 29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9815698547, -0.0000000000, 0.1911036899, 9.5523223081], [-0.0120890722, 0.9979971292, -0.0620933529, -3.1037376627], [0.1907209339, 0.0632592297, 0.9796038971, 48.9655231888], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000], [-0.0000000000, -0.2583674921, -0.9660467065, -48.2878667039], [0.0000000000, 0.9660467065, -0.2583674921, -12.9145049962], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9815698547, 0.0000000000, -0.1911036899, -9.5523223081], [0.1759923866, -0.3897371093, -0.9039533536, -45.1841290412], [0.0744801997, 0.9209261564, -0.3825541978, -19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9815698547, 0.0000000000, 0.1911036899, 9.5523223081], [-0.1759923866, -0.3897371093, -0.9039533536, -45.1841290412], [-0.0744801997, 0.9209261564, -0.3825541978, -19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3948048212, 0.0000000000, 0.9187650152, 45.9244902867], [0.6947083048, 0.6544182801, 0.2985248497, 14.9217714336], [0.6012566211, -0.7561327361, 0.2583674921, 12.9145049962], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5991237484, 0.0000000000, 0.8006564395, 40.0208304288], [0.6161874960, 0.6385228408, 0.4610873580, 23.0474621266], [0.5112374242, -0.7696028728, 0.3825541978, 19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3948048212, 0.0000000000, 0.9187650152, 45.9244902867], [-0.6947083048, -0.6544182801, -0.2985248497, -14.9217714336], [-0.6012566211, 0.7561327361, -0.2583674921, -12.9145049962], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3948048212, 0.0000000000, -0.9187650152, -45.9244902867], [0.2270972719, -0.9689704312, -0.0975865388, -4.8778653729], [0.8902561330, 0.2471766645, -0.3825541978, -19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6722493342, 0.0000000000, -0.7403248157, -36.9892646323], [-0.2649050711, -0.9337895214, 0.2405461142, 12.0185406282], [0.6913075553, -0.3578227631, -0.6277393840, -31.3640954672], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8891860044, 0.0000000000, -0.4575458988, -22.8606227616], [0.3240527227, -0.7059708327, -0.6297579029, -31.4649478598], [0.3230140592, 0.7082409077, -0.6277393840, -31.3640954672], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9815698547, 0.0000000000, 0.1911036899, 9.5523223081], [0.0120890722, -0.9979971292, 0.0620933529, 3.1037376627], [-0.1907209339, -0.0632592297, -0.9796038971, -48.9655231888], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.7276613253, -0.0000000000, -0.6859365828, -34.2865557711], [0.5834925086, 0.5257311121, -0.6189856946, -30.9400140925], [-0.3606182025, 0.8506508084, 0.3825541978, 19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6722493342, 0.0000000000, -0.7403248157, -36.9892646323], [0.7367934241, -0.0975569605, -0.6690426665, -33.4277545740], [0.0722238388, 0.9952299430, -0.0655826017, -3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8231472252, -0.0000000000, -0.5678280071, -28.3828959132], [0.5391319376, 0.3138776201, -0.7815482029, -39.0657047856], [-0.1782285035, 0.9494634483, 0.2583674921, 12.9145049962], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8097374849, -0.0000000000, -0.5867923019, -29.3696028063], [0.5852797932, 0.0717532695, -0.8076503154, -40.4237903140], [-0.0421042662, 0.9974224122, 0.0581013120, 2.9080348375], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8450781032, 0.0000000000, -0.5346428710, -26.7126620912], [-0.4655535803, 0.4916819228, 0.7358727815, 36.7668251499], [-0.2628742348, -0.8707748772, 0.4155096267, 20.7603408869], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9269507747, 0.0000000000, -0.3751829705, -18.7783220526], [-0.3547251361, 0.3257022852, 0.8764063551, 43.8651060392], [-0.1221979509, -0.9454723800, 0.3019099856, 15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6964822086, 0.0000000000, -0.7175740610, -35.9153742965], [-0.6466518839, 0.4334783888, 0.6276446666, 31.4143087794], [-0.3110528478, -0.9011639620, 0.3019099856, 15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6722493342, 0.0000000000, -0.7403248157, -36.9892646323], [-0.7367934241, 0.0975569605, 0.6690426665, 33.4277545740], [-0.0722238388, -0.9952299430, 0.0655826017, 3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8097374849, 0.0000000000, -0.5867923019, -29.3696028063], [-0.5852797932, -0.0717532695, 0.8076503154, 40.4237903140], [0.0421042662, -0.9974224122, -0.0581013120, -2.9080348375], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9131943014, 0.0000000000, -0.4075244383, -20.3613724319], [-0.4064721478, 0.0718167006, 0.9108362940, 45.5086254087], [-0.0292670606, -0.9974178470, 0.0655826017, 3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.7276613253, 0.0000000000, -0.6859365828, -34.2865557711], [-0.5834925086, -0.5257311121, 0.6189856946, 30.9400140925], [0.3606182025, -0.8506508084, -0.3825541978, -19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9263254228, 0.0000000000, -0.3767243172, -18.8305736051], [-0.2925927870, -0.6299001348, 0.7194548500, 35.9619671229], [0.2372986982, -0.7766761360, -0.5834925086, -29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8231472252, 0.0000000000, -0.5678280071, -28.3828959132], [-0.4005195520, -0.7088555859, 0.5806098920, 29.0217987248], [0.4025080547, -0.7053536406, -0.5834925086, -29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9263254228, 0.0000000000, -0.3767243172, -18.8305736051], [-0.3430978803, -0.4129803505, 0.8436415558, 42.1694424482], [0.1555797406, -0.9107399355, -0.3825541978, -19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8231472252, 0.0000000000, -0.5678280071, -28.3828959132], [-0.5391319376, -0.3138776201, 0.7815482029, 39.0657047856], [0.1782285035, -0.9494634483, -0.2583674921, -12.9145049962], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000], [0.0000000000, 0.0581013120, 0.9983106919, 49.9665527363], [0.0000000000, -0.9983106919, 0.0581013120, 2.9080348375], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9773543323, 0.0000000000, -0.2116093314, -10.5912807537], [-0.2012601080, -0.3089053536, 0.9295546522, 46.5252370111], [0.0653672553, -0.9510927833, -0.3019099856, -15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9786188929, 0.0000000000, -0.2056819447, -10.2766025411], [-0.2052195587, -0.0670154666, 0.9764188958, 48.7853657781], [0.0137838715, -0.9977519367, -0.0655826017, -3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9786188929, 0.0000000000, 0.2056819447, 10.2766025411], [0.2052195587, -0.0670154666, 0.9764188958, 48.7853657781], [-0.0137838715, -0.9977519367, -0.0655826017, -3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000], [0.0000000000, -0.6277393840, 0.7784235773, 38.8928144632], [-0.0000000000, -0.7784235773, -0.6277393840, -31.3640954672], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-1.0000000000, 0.0000000000, -0.0000000000, -0.0000000000], [-0.0000000000, -0.4155096267, 0.9095887808, 45.4462952022], [0.0000000000, -0.9095887808, -0.4155096267, -20.7603408869], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9263254228, 0.0000000000, 0.3767243172, 18.8305736051], [0.3430978803, -0.4129803505, 0.8436415558, 42.1694424482], [-0.1555797406, -0.9107399355, -0.3825541978, -19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9773543323, 0.0000000000, 0.2116093314, 10.5912807537], [0.2012601080, -0.3089053536, 0.9295546522, 46.5252370111], [-0.0653672553, -0.9510927833, -0.3019099856, -15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9131943014, 0.0000000000, 0.4075244383, 20.3613724319], [0.1556026159, -0.9242350480, 0.3486795117, 17.4212703110], [-0.3766483688, -0.3818240118, -0.8440061791, -42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9786188929, 0.0000000000, 0.2056819447, 10.2766025411], [0.1041056462, -0.8624462343, 0.4953266673, 24.7482845217], [-0.1773896187, -0.5061486866, -0.8440061791, -42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9263254228, 0.0000000000, 0.3767243172, 18.8305736051], [0.2925927870, -0.6299001348, 0.7194548500, 35.9619671229], [-0.2372986982, -0.7766761360, -0.5834925086, -29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9773543323, 0.0000000000, 0.2116093314, 10.5912807537], [0.1484725071, -0.7125365727, 0.6857459786, 34.3223436169], [-0.1507793878, -0.7016349710, -0.6964007063, -34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6859365828, 0.0000000000, -0.7276613253, -36.3721679786], [-0.3825541978, 0.8506508084, 0.3606182025, 18.0255090963], [-0.6189856946, -0.5257311121, 0.5834925086, 29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5991237484, 0.0000000000, -0.8006564395, -40.0208304288], [-0.6161874960, 0.6385228408, 0.4610873580, 23.0474621266], [-0.5112374242, -0.7696028728, 0.3825541978, 19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3948048212, 0.0000000000, -0.9187650152, -45.9244902867], [-0.6947083048, 0.6544182801, 0.2985248497, 14.9217714336], [-0.6012566211, -0.7561327361, 0.2583674921, 12.9145049962], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5991237484, 0.0000000000, -0.8006564395, -40.0208304288], [-0.1816972277, 0.9739098311, 0.1359623414, 6.7960807406], [-0.7797671778, -0.2269353230, 0.5834925086, 29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3948048212, 0.0000000000, -0.9187650152, -45.9244902867], [-0.2270972719, 0.9689704312, 0.0975865388, 4.8778653729], [-0.8902561330, -0.2471766645, 0.3825541978, 19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6964822086, -0.0000000000, -0.7175740610, -35.9153742965], [0.0109773891, 0.9998829800, -0.0106547277, -0.5332808877], [-0.7174900905, 0.0152979179, 0.6964007063, 34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8097374849, -0.0000000000, -0.5867923019, -29.3696028063], [0.2994042812, 0.8600326887, -0.4131595948, -20.6790940411], [-0.5046605611, 0.5102389385, 0.6964007063, 34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9131943014, -0.0000000000, -0.4075244383, -20.3613724319], [0.1556026159, 0.9242350480, -0.3486795117, -17.4212703110], [-0.3766483688, 0.3818240118, 0.8440061791, 42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6722493342, -0.0000000000, -0.7403248157, -36.9892646323], [0.2649050711, 0.9337895214, -0.2405461142, -12.0185406282], [-0.6913075553, 0.3578227631, 0.6277393840, 31.3640954672], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8450781032, 0.0000000000, -0.5346428710, -26.7126620912], [-0.0269199729, 0.9987315680, 0.0425507958, 2.1259893133], [-0.5339647128, -0.0503513174, 0.8440061791, 42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9269507747, -0.0000000000, -0.3751829705, -18.7783220526], [0.0493407336, 0.9913146951, -0.1219043368, -6.1014466971], [-0.3719243920, 0.1315111224, 0.9188999245, 45.9919561234], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8891860044, 0.0000000000, -0.4575458988, -22.8606227616], [-0.3240527227, 0.7059708327, 0.6297579029, 31.4649478598], [-0.3230140592, -0.7082409077, 0.6277393840, 31.3640954672], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9727453935, 0.0000000000, -0.2318758278, -11.6056412802], [-0.1618933576, 0.7159126231, 0.6791609948, 33.9927579028], [-0.1660028321, -0.6981898854, 0.6964007063, 34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8186681297, 0.0000000000, -0.5742669183, -28.7426935241], [-0.3019099856, 0.8506508084, 0.4303993063, 21.5419606429], [-0.4885006183, -0.5257311121, 0.6964007063, 34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8891860044, 0.0000000000, -0.4575458988, -22.8606227616], [-0.1439917744, 0.9491896800, 0.2798308779, 13.9813473424], [-0.4342978453, -0.3147045460, 0.8440061791, 42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.7276613253, -0.0000000000, 0.6859365828, 34.2865557711], [-0.5834925086, 0.5257311121, -0.6189856946, -30.9400140925], [0.3606182025, 0.8506508084, 0.3825541978, 19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6722493342, 0.0000000000, 0.7403248157, 36.9892646323], [-0.7367934241, -0.0975569605, -0.6690426665, -33.4277545740], [-0.0722238388, 0.9952299430, -0.0655826017, -3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8097374849, -0.0000000000, 0.5867923019, 29.3696028063], [-0.5852797932, 0.0717532695, -0.8076503154, -40.4237903140], [0.0421042662, 0.9974224122, 0.0581013120, 2.9080348375], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8231472252, -0.0000000000, 0.5678280071, 28.3828959132], [-0.5391319376, 0.3138776201, -0.7815482029, -39.0657047856], [0.1782285035, 0.9494634483, 0.2583674921, 12.9145049962], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9930006870, 0.0000000000, 0.1181085757, 5.9036598579], [0.0193353606, 0.9865087809, 0.1625625083, 8.1256906930], [0.1165151471, -0.1637083543, 0.9796038971, 48.9655231888], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9921887698, 0.0000000000, -0.1247455214, -6.2327305612], [-0.0655826017, 0.8506508084, 0.5216245054, 26.0622181771], [-0.1061148786, -0.5257311121, 0.8440061791, 42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9930006870, 0.0000000000, -0.1181085757, -5.9036598579], [-0.0193353606, 0.9865087809, 0.1625625083, 8.1256906930], [-0.1165151471, -0.1637083543, 0.9796038971, 48.9655231888], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9727453935, 0.0000000000, -0.2318758278, -11.6056412802], [-0.0760765363, 0.9446458762, 0.3191496971, 15.9737948335], [-0.2190405445, -0.3280917075, 0.9188999245, 45.9919561234], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8097374849, -0.0000000000, 0.5867923019, 29.3696028063], [-0.2994042812, 0.8600326887, -0.4131595948, -20.6790940411], [0.5046605611, 0.5102389385, 0.6964007063, 34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6722493342, -0.0000000000, 0.7403248157, 36.9892646323], [-0.2649050711, 0.9337895214, -0.2405461142, -12.0185406282], [0.6913075553, 0.3578227631, 0.6277393840, 31.3640954672], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9131943014, -0.0000000000, 0.4075244383, 20.3613724319], [-0.1556026159, 0.9242350480, -0.3486795117, -17.4212703110], [0.3766483688, 0.3818240118, 0.8440061791, 42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6964822086, -0.0000000000, 0.7175740610, 35.9153742965], [-0.0109773891, 0.9998829800, -0.0106547277, -0.5332808877], [0.7174900905, 0.0152979179, 0.6964007063, 34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8450781032, 0.0000000000, 0.5346428710, 26.7126620912], [0.0269199729, 0.9987315680, 0.0425507958, 2.1259893133], [0.5339647128, -0.0503513174, 0.8440061791, 42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9269507747, -0.0000000000, 0.3751829705, 18.7783220526], [-0.0493407336, 0.9913146951, -0.1219043368, -6.1014466971], [0.3719243920, 0.1315111224, 0.9188999245, 45.9919561234], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8891860044, 0.0000000000, 0.4575458988, 22.8606227616], [-0.1439917744, -0.9491896800, -0.2798308779, -13.9813473424], [-0.4342978453, 0.3147045460, -0.8440061791, -42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8450781032, 0.0000000000, 0.5346428710, 26.7126620912], [-0.0269199729, -0.9987315680, -0.0425507958, -2.1259893133], [-0.5339647128, 0.0503513174, -0.8440061791, -42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8891860044, 0.0000000000, 0.4575458988, 22.8606227616], [-0.3240527227, -0.7059708327, -0.6297579029, -31.4649478598], [-0.3230140592, 0.7082409077, -0.6277393840, -31.3640954672], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8450781032, 0.0000000000, 0.5346428710, 26.7126620912], [-0.4655535803, -0.4916819228, -0.7358727815, -36.7668251499], [-0.2628742348, 0.8707748772, -0.4155096267, -20.7603408869], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6859365828, 0.0000000000, 0.7276613253, 36.3721679786], [-0.3825541978, -0.8506508084, -0.3606182025, -18.0255090963], [-0.6189856946, 0.5257311121, -0.5834925086, -29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8186681297, 0.0000000000, 0.5742669183, 28.7426935241], [-0.3019099856, -0.8506508084, -0.4303993063, -21.5419606429], [-0.4885006183, 0.5257311121, -0.6964007063, -34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6964822086, 0.0000000000, 0.7175740610, 35.9153742965], [-0.6466518839, -0.4334783888, -0.6276446666, -31.4143087794], [-0.3110528478, 0.9011639620, -0.3019099856, -15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5991237484, 0.0000000000, 0.8006564395, 40.0208304288], [-0.6161874960, -0.6385228408, -0.4610873580, -23.0474621266], [-0.5112374242, 0.7696028728, -0.3825541978, -19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9269507747, 0.0000000000, 0.3751829705, 18.7783220526], [0.3547251361, 0.3257022852, 0.8764063551, 43.8651060392], [0.1221979509, -0.9454723800, 0.3019099856, 15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8450781032, 0.0000000000, 0.5346428710, 26.7126620912], [0.4655535803, 0.4916819228, 0.7358727815, 36.7668251499], [0.2628742348, -0.8707748772, 0.4155096267, 20.7603408869], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9131943014, 0.0000000000, 0.4075244383, 20.3613724319], [0.4064721478, 0.0718167006, 0.9108362940, 45.5086254087], [0.0292670606, -0.9974178470, 0.0655826017, 3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8097374849, 0.0000000000, 0.5867923019, 29.3696028063], [0.5852797932, -0.0717532695, 0.8076503154, 40.4237903140], [-0.0421042662, -0.9974224122, -0.0581013120, -2.9080348375], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6722493342, 0.0000000000, 0.7403248157, 36.9892646323], [0.7367934241, 0.0975569605, 0.6690426665, 33.4277545740], [0.0722238388, -0.9952299430, 0.0655826017, 3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6964822086, 0.0000000000, 0.7175740610, 35.9153742965], [0.6466518839, 0.4334783888, 0.6276446666, 31.4143087794], [0.3110528478, -0.9011639620, 0.3019099856, 15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3948048212, 0.0000000000, 0.9187650152, 45.9244902867], [-0.2270972719, -0.9689704312, -0.0975865388, -4.8778653729], [-0.8902561330, 0.2471766645, -0.3825541978, -19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5991237484, 0.0000000000, 0.8006564395, 40.0208304288], [-0.1816972277, -0.9739098311, -0.1359623414, -6.7960807406], [-0.7797671778, 0.2269353230, -0.5834925086, -29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6964822086, 0.0000000000, 0.7175740610, 35.9153742965], [0.0109773891, -0.9998829800, 0.0106547277, 0.5332808877], [-0.7174900905, -0.0152979179, -0.6964007063, -34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3139186338, 0.0000000000, -0.9494498888, -47.5210155767], [-0.9330459645, 0.1850839860, 0.3084949695, 15.4405139458], [-0.1757279699, -0.9827227066, 0.0581013120, 2.9080348375], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.1247455214, 0.0000000000, -0.9921887698, -49.5732848528], [-0.8440061791, -0.5257311121, 0.1061148786, 5.3018772901], [0.5216245054, -0.8506508084, -0.0655826017, -3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5016505874, 0.0000000000, -0.8650703371, -43.2219951935], [-0.8576458967, -0.1307336289, 0.4973451862, 24.8491369144], [0.1130937844, -0.9914175297, -0.0655826017, -3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5742669183, 0.0000000000, -0.8186681297, -40.9752440865], [-0.6964007063, -0.5257311121, 0.4885006183, 24.4499954805], [0.4303993063, -0.8506508084, -0.3019099856, -15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5016505874, 0.0000000000, -0.8650703371, -43.2219951935], [-0.4847050610, -0.8282849400, 0.2810783911, 14.0436775489], [0.7165247323, -0.5603071105, -0.4155096267, -20.7603408869], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3139186338, 0.0000000000, -0.9494498888, -47.5210155767], [-0.2600949661, -0.9617459849, 0.0859957512, 4.3041823270], [0.9131296184, -0.2739428053, -0.3019099856, -15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8891860044, 0.0000000000, -0.4575458988, -22.8606227616], [0.1439917744, -0.9491896800, -0.2798308779, -13.9813473424], [0.4342978453, 0.3147045460, -0.8440061791, -42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8450781032, 0.0000000000, -0.5346428710, -26.7126620912], [0.0269199729, -0.9987315680, -0.0425507958, -2.1259893133], [0.5339647128, 0.0503513174, -0.8440061791, -42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6859365828, 0.0000000000, -0.7276613253, -36.3721679786], [0.3825541978, -0.8506508084, -0.3606182025, -18.0255090963], [0.6189856946, 0.5257311121, -0.5834925086, -29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8186681297, 0.0000000000, -0.5742669183, -28.7426935241], [0.3019099856, -0.8506508084, -0.4303993063, -21.5419606429], [0.4885006183, 0.5257311121, -0.6964007063, -34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6964822086, 0.0000000000, -0.7175740610, -35.9153742965], [-0.0109773891, -0.9998829800, 0.0106547277, 0.5332808877], [0.7174900905, -0.0152979179, -0.6964007063, -34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5991237484, 0.0000000000, -0.8006564395, -40.0208304288], [0.1816972277, -0.9739098311, -0.1359623414, -6.7960807406], [0.7797671778, 0.2269353230, -0.5834925086, -29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9727453935, 0.0000000000, 0.2318758278, 11.6056412802], [-0.1618933576, -0.7159126231, -0.6791609948, -33.9927579028], [-0.1660028321, 0.6981898854, -0.6964007063, -34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9930006870, 0.0000000000, 0.1181085757, 5.9036598579], [-0.0955672796, -0.5876053424, -0.8034841982, -40.1621760109], [-0.0694012301, 0.8091476760, -0.5834925086, -29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9930006870, 0.0000000000, -0.1181085757, -5.9036598579], [0.0955672796, -0.5876053424, -0.8034841982, -40.1621760109], [0.0694012301, 0.8091476760, -0.5834925086, -29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9727453935, 0.0000000000, -0.2318758278, -11.6056412802], [0.1618933576, -0.7159126231, -0.6791609948, -33.9927579028], [0.1660028321, 0.6981898854, -0.6964007063, -34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9727453935, 0.0000000000, -0.2318758278, -11.6056412802], [0.0760765363, -0.9446458762, -0.3191496971, -15.9737948335], [0.2190405445, 0.3280917075, -0.9188999245, -45.9919561234], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9930006870, 0.0000000000, -0.1181085757, -5.9036598579], [0.0193353606, -0.9865087809, -0.1625625083, -8.1256906930], [0.1165151471, 0.1637083543, -0.9796038971, -48.9655231888], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9921887698, 0.0000000000, -0.1247455214, -6.2327305612], [0.0655826017, -0.8506508084, -0.5216245054, -26.0622181771], [0.1061148786, 0.5257311121, -0.8440061791, -42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9921887698, 0.0000000000, 0.1247455214, 6.2327305612], [-0.0655826017, -0.8506508084, -0.5216245054, -26.0622181771], [-0.1061148786, 0.5257311121, -0.8440061791, -42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9727453935, 0.0000000000, 0.2318758278, 11.6056412802], [-0.0760765363, -0.9446458762, -0.3191496971, -15.9737948335], [-0.2190405445, 0.3280917075, -0.9188999245, -45.9919561234], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9930006870, 0.0000000000, 0.1181085757, 5.9036598579], [-0.0193353606, -0.9865087809, -0.1625625083, -8.1256906930], [-0.1165151471, 0.1637083543, -0.9796038971, -48.9655231888], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9269507747, 0.0000000000, -0.3751829705, -18.7783220526], [-0.0493407336, -0.9913146951, 0.1219043368, 6.1014466971], [0.3719243920, -0.1315111224, -0.9188999245, -45.9919561234], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9815698547, 0.0000000000, -0.1911036899, -9.5523223081], [-0.0120890722, -0.9979971292, 0.0620933529, 3.1037376627], [0.1907209339, -0.0632592297, -0.9796038971, -48.9655231888], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9131943014, 0.0000000000, -0.4075244383, -20.3613724319], [-0.1556026159, -0.9242350480, 0.3486795117, 17.4212703110], [0.3766483688, -0.3818240118, -0.8440061791, -42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9786188929, 0.0000000000, -0.2056819447, -10.2766025411], [-0.1041056462, -0.8624462343, 0.4953266673, 24.7482845217], [0.1773896187, -0.5061486866, -0.8440061791, -42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-1.0000000000, 0.0000000000, -0.0000000000, -0.0000000000], [-0.0000000000, -0.9188999245, 0.3944907207, 19.7446962729], [0.0000000000, -0.3944907207, -0.9188999245, -45.9919561234], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000], [0.0000000000, -0.9796038971, 0.2009383108, 10.0439060607], [-0.0000000000, -0.2009383108, -0.9796038971, -48.9655231888], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.1247455214, -0.0000000000, -0.9921887698, -49.5732848528], [0.8440061791, 0.5257311121, -0.1061148786, -5.3018772901], [-0.5216245054, 0.8506508084, 0.0655826017, 3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3139186338, 0.0000000000, -0.9494498888, -47.5210155767], [0.9330459645, -0.1850839860, -0.3084949695, -15.4405139458], [0.1757279699, 0.9827227066, -0.0581013120, -2.9080348375], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3139186338, -0.0000000000, -0.9494498888, -47.5210155767], [0.2600949661, 0.9617459849, -0.0859957512, -4.3041823270], [-0.9131296184, 0.2739428053, 0.3019099856, 15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5016505874, -0.0000000000, -0.8650703371, -43.2219951935], [0.4847050610, 0.8282849400, -0.2810783911, -14.0436775489], [-0.7165247323, 0.5603071105, 0.4155096267, 20.7603408869], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5016505874, -0.0000000000, -0.8650703371, -43.2219951935], [0.8576458967, 0.1307336289, -0.4973451862, -24.8491369144], [-0.1130937844, 0.9914175297, 0.0655826017, 3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5742669183, -0.0000000000, -0.8186681297, -40.9752440865], [0.6964007063, 0.5257311121, -0.4885006183, -24.4499954805], [-0.4303993063, 0.8506508084, 0.3019099856, 15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5016505874, -0.0000000000, 0.8650703371, 43.2219951935], [-0.4847050610, 0.8282849400, -0.2810783911, -14.0436775489], [0.7165247323, 0.5603071105, 0.4155096267, 20.7603408869], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3139186338, -0.0000000000, 0.9494498888, 47.5210155767], [-0.2600949661, 0.9617459849, -0.0859957512, -4.3041823270], [0.9131296184, 0.2739428053, 0.3019099856, 15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.1247455214, -0.0000000000, 0.9921887698, 49.5732848528], [-0.8440061791, 0.5257311121, -0.1061148786, -5.3018772901], [0.5216245054, 0.8506508084, 0.0655826017, 3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3139186338, 0.0000000000, 0.9494498888, 47.5210155767], [-0.9330459645, -0.1850839860, -0.3084949695, -15.4405139458], [-0.1757279699, 0.9827227066, -0.0581013120, -2.9080348375], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5016505874, -0.0000000000, 0.8650703371, 43.2219951935], [-0.8576458967, 0.1307336289, -0.4973451862, -24.8491369144], [0.1130937844, 0.9914175297, 0.0655826017, 3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5742669183, -0.0000000000, 0.8186681297, 40.9752440865], [-0.6964007063, 0.5257311121, -0.4885006183, -24.4499954805], [0.4303993063, 0.8506508084, 0.3019099856, 15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9727453935, 0.0000000000, 0.2318758278, 11.6056412802], [0.1618933576, 0.7159126231, 0.6791609948, 33.9927579028], [0.1660028321, -0.6981898854, 0.6964007063, 34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8891860044, 0.0000000000, 0.4575458988, 22.8606227616], [0.3240527227, 0.7059708327, 0.6297579029, 31.4649478598], [0.3230140592, -0.7082409077, 0.6277393840, 31.3640954672], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8186681297, 0.0000000000, 0.5742669183, 28.7426935241], [0.3019099856, 0.8506508084, 0.4303993063, 21.5419606429], [0.4885006183, -0.5257311121, 0.6964007063, 34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8891860044, 0.0000000000, 0.4575458988, 22.8606227616], [0.1439917744, 0.9491896800, 0.2798308779, 13.9813473424], [0.4342978453, -0.3147045460, 0.8440061791, 42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9727453935, 0.0000000000, 0.2318758278, 11.6056412802], [0.0760765363, 0.9446458762, 0.3191496971, 15.9737948335], [0.2190405445, -0.3280917075, 0.9188999245, 45.9919561234], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.9921887698, 0.0000000000, 0.1247455214, 6.2327305612], [0.0655826017, 0.8506508084, 0.5216245054, 26.0622181771], [0.1061148786, -0.5257311121, 0.8440061791, 42.1695548327], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.7276613253, 0.0000000000, 0.6859365828, 34.2865557711], [0.5834925086, -0.5257311121, 0.6189856946, 30.9400140925], [-0.3606182025, -0.8506508084, -0.3825541978, -19.1219803216], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.6722493342, 0.0000000000, 0.7403248157, 36.9892646323], [0.2649050711, -0.9337895214, 0.2405461142, 12.0185406282], [-0.6913075553, -0.3578227631, -0.6277393840, -31.3640954672], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8231472252, 0.0000000000, 0.5678280071, 28.3828959132], [0.4005195520, -0.7088555859, 0.5806098920, 29.0217987248], [-0.4025080547, -0.7053536406, -0.5834925086, -29.1658863823], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.8097374849, 0.0000000000, 0.5867923019, 29.3696028063], [0.2994042812, -0.8600326887, 0.4131595948, 20.6790940411], [-0.5046605611, -0.5102389385, -0.6964007063, -34.8556245046], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5016505874, 0.0000000000, 0.8650703371, 43.2219951935], [0.8576458967, -0.1307336289, 0.4973451862, 24.8491369144], [-0.1130937844, -0.9914175297, -0.0655826017, -3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.1247455214, 0.0000000000, 0.9921887698, 49.5732848528], [0.8440061791, -0.5257311121, 0.1061148786, 5.3018772901], [-0.5216245054, -0.8506508084, -0.0655826017, -3.2767403695], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3139186338, 0.0000000000, 0.9494498888, 47.5210155767], [0.9330459645, 0.1850839860, 0.3084949695, 15.4405139458], [0.1757279699, -0.9827227066, 0.0581013120, 2.9080348375], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.3139186338, 0.0000000000, 0.9494498888, 47.5210155767], [0.2600949661, -0.9617459849, 0.0859957512, 4.3041823270], [-0.9131296184, -0.2739428053, -0.3019099856, -15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5016505874, 0.0000000000, 0.8650703371, 43.2219951935], [0.4847050610, -0.8282849400, 0.2810783911, 14.0436775489], [-0.7165247323, -0.5603071105, -0.4155096267, -20.7603408869], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
		multmatrix(m = [[-0.5742669183, 0.0000000000, 0.8186681297, 40.9752440865], [0.6964007063, -0.5257311121, 0.4885006183, 24.4499954805], [-0.4303993063, -0.8506508084, -0.3019099856, -15.1109282317], [0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000]]) {
			cylinder(center = true, h = 2, r = 0.5000000000);
		}
	}
	translate(v = [0, 0, 50]) {
		cube(center = true, size = 100);
	}
}
/***********************************************
*********      SolidPython code:      **********
************************************************
 
#!/usr/bin/env python3

import geodesic as geo
import numpy as np
import itertools
import collections
import matplotlib.pyplot as plt
import random
random.seed(0)
import uuid
import re

#fig = plt.figure()
#ax = fig.add_subplot(projection='3d')

KICAD_FLIP = np.array([1, -1]) # Kicad Y is positive down

# Overall radius of sphere
radius = 50

# Flat pattern: Offset each polygon inward slightly to add clearance for board edges
offset_dist = -0.05 # mm
circle_r = 0.65 # mm

(vs, es, fs) = geo.sphere(u=3, v=0)

#vms = geo.vertex_matrices(vs)
#ems = geo.edge_matrices(es, vs)
#fms = geo.face_matrices(fs, vs)
#ves = geo.vertex_edges(es)
#fes = geo.face_edges(fs, es)
#els = geo.edge_lengths(es, vs)

def dual(vs, es, fs):
    def faces_from_edge(e):
        assert len(result) == 2

    # Get a list of each dual vertex (parallel to faces)
    def face_centroid(f):
        return np.mean(vs[np.array(f)], axis=0)

    dvs = np.array([face_centroid(f) for f in fs])

    # Get a list of each dual face (parallel to vertices)
    def face_indices_from_vertex_index(vi):
        result = [
            fi for (fi, f) in enumerate(fs)
            if vi in f
        ]
        return result

    dfs = [face_indices_from_vertex_index(vi) for vi in range(len(vs))]

    # Get a list of each dual edge (parallel to edges)
    def dual_edge_from_edge(e):
        # Find the two face indices that this edge is the intersection of
        e = frozenset(e)
        result = [fi for (fi, f) in enumerate(fs) if 
            frozenset((f[0], f[1])) == e
            or frozenset((f[0], f[2])) == e
            or frozenset((f[1], f[2])) == e
        ]
        assert len(result) == 2
        return result

    des = [dual_edge_from_edge(e) for e in es]

    return (dvs, des, dfs)

(dvs, des, dfs) = dual(vs, es, fs)


def nudge_vertices(vs, es):
    vs = np.array(vs)

    def adjacent_vis(vi):
        vis = []
        for (vi1, vi2) in es:
            if vi == vi1:
                vis.append(vi2)
            elif vi == vi2:
                vis.append(vi1)
        return set(vis)

    def nudge_vertex(vi):
        adjacent_1 = adjacent_vis(vi)
        #adjacent_2 = {vi2 for vi1 in adjacent_1 for vi2 in adjacent_vis(vi1)}
        #adjacent_2 = adjacent_2 - adjacent_1 - {vi}
        #new_v = np.mean(vs[np.array(adjacent_1)], axis=0)
        new_v = np.mean(vs[list(adjacent_1)], axis=0)
        nudge = new_v - vs[vi]
        return vs[vi] - nudge ## Apply backwards--weird

    return [nudge_vertex(vi) for vi in range(len(vs))]

def face_planes(vs, fs):
    vs = np.array(vs)

    def face_plane(f):
        f = np.array(f)
        expected_dir = np.mean(vs[f], axis=0)
        # Find the average normal of all vertex triples
        vi_triples = np.array(list(itertools.combinations(f, 3)))

        def normal(v1, v2, v3):
            n = np.cross(v2 - v1, v3 - v1)
            if np.dot(n, expected_dir) < 0:
                n = -n
            return n / np.linalg.norm(n)

        normals = [normal(*vs[vi_triple]) for vi_triple in vi_triples]
        avg_normal = np.mean(np.array(normals), axis=0)
        avg_normal = avg_normal / np.linalg.norm(avg_normal)
        avg_dist = np.mean(np.dot(vs[f], avg_normal), axis=0)

        return avg_normal, avg_dist

    face_normals, face_ds = zip(*[face_plane(f) for f in fs])

    return face_normals, face_ds

def flatten_faces(vs, fs, face_normals, face_ds):
    vs = np.array(vs)

    # Recompute each vertex as the intersection of its face planes
    def intersection_of_faces(vi):
        fis = [
            fi for (fi, f) in enumerate(fs)
            if vi in f
        ]

        assert len(fis) == 3
        a = np.array([face_normals[f] for f in fis])
        b = np.array([face_ds[f] for f in fis])
        pt = np.linalg.solve(a, b)
        return pt

    return [intersection_of_faces(vi) for vi in range(len(vs))]

def flatten_pts_onto_faces(face_normals, face_ds, pts):
    def flatten_pt(pt):
        chosen_fi = None
        for fi, (n, d) in enumerate(zip(face_normals, face_ds)):
            proj_d = np.dot(n, pt)
            if proj_d > d - 1e-5:
                # Project onto plane
                pt *= d / proj_d
                chosen_fi = fi
        assert chosen_fi is not None
        return pt, chosen_fi

    (pts, fis) = zip(*[flatten_pt(pt) for pt in pts])
    return pts, fis

dvs = nudge_vertices(dvs, des)
dvs = geo.project_points_to_sphere(dvs)

face_normals, face_ds = face_planes(dvs, dfs)
dvs = flatten_faces(dvs, dfs, face_normals, face_ds)

## Draw the result
## Only select a few faces
#
#allow_face_indices = []
#
#allow_vertices = [vi for vi in range(len(dvs)) if any(vi in dfs[fi] for fi in allow_face_indices)]
#
#for (dvi1, dvi2) in des:
#    #if dvi1 in allow_vertices and dvi2 in allow_vertices:
#    if dvs[dvi1][2] > 0.5:
#        ax.plot(
#            [dvs[dvi1][0], dvs[dvi2][0]],
#            [dvs[dvi1][1], dvs[dvi2][1]],
#            [dvs[dvi1][2], dvs[dvi2][2]],
#        )

(vs, es, fs) = geo.sphere(u=4, v=3, base=vs)

vs = np.array(vs) * radius
dvs = np.array(dvs) * radius

print(len(vs))

face_normals, face_ds = face_planes(dvs, dfs)
vs, v_fis = flatten_pts_onto_faces(face_normals, face_ds, vs)
vs = np.array(vs)
v_fis = np.array(v_fis)

#cond = vs[:, 2] > 0.5
#vs = vs[cond]
#v_fis = v_fis[cond]
#ax.scatter(vs[:, 0], vs[:, 1], vs[:, 2], c=v_fis)

# Route data from face to face

def route_data_coarse(es, fs, first_face, last_face, heuristic):
    face_connections = [set() for _ in range(len(fs))]
    for (ei, (vi1, vi2)) in enumerate(es):
        # Find faces that contain this edge
        faces = set(fi for fi in range(len(fs))
            if vi1 in fs[fi] and vi2 in fs[fi])

        # Connect them to each other
        for fi in faces:
            face_connections[fi] |= {(fi, ei) for fi in faces - {fi}}

    # Search over faces with a heuristic
    # to generate a path that visits all of them

    to_visit = [([], [], first_face)]

    heuristic_key = lambda s: heuristic(*s)

    while to_visit:
        (f_history, e_history, f) = to_visit.pop()
        # Check termination condition
        if f == last_face and len(f_history) + 1 == len(fs):
            f_history = f_history + [f]

            # The search is done--
            # but first, add in a fake edge at the beginning for overall data input
            # and a fake edge at the end for overall data output.
            # Do this by artifically extending the search one step before the first and one step beyond the last
            # and taking whichever edge produces the best heuristic value.

            possible_pre_first_steps = [([fi], [], f_history[0]) for (fi, ei) in face_connections[f_history[0]] if ei != e_history[0]]
            ((pre_first_face,), _, _) = max(possible_pre_first_steps, key=heuristic_key)
            (first_half_edge,) = (ei for (fi, ei) in face_connections[f_history[0]] if fi == pre_first_face)

            possible_post_last_steps = [([f_history[-1]], [], fi) for (fi, ei) in face_connections[f_history[-1]] if ei != e_history[-1] and ei != first_half_edge]
            (_, _, post_last_face) = max(possible_post_last_steps, key=heuristic_key)
            (last_half_edge,) = (ei for (fi, ei) in face_connections[f_history[-1]] if fi == post_last_face)

            e_history = [first_half_edge] + e_history + [last_half_edge]

            return f_history, e_history

        # Enumerate possible next steps
        possible_next_steps = [(f_history + [f], e_history + [ei], nf) for nf, ei in face_connections[f] if nf not in f_history]
        # Sort possible next steps according to heuristic
        possible_next_steps = sorted(possible_next_steps, key=heuristic_key)
        to_visit.extend(possible_next_steps)

    assert False, "Search did not find any paths"

topness = lambda fi: face_normals[fi][2]

def circulation(fi1, fi2):
    c = np.cross(face_normals[fi1], face_normals[fi2])
    c = c / np.linalg.norm(c)
    return c[2]

first_face = max(range(len(dfs)), key=topness)
last_face = min(range(len(dfs)), key=topness)

def heuristic(fh, eh, fi):
    t = topness(fi)
    c = circulation(fh[-1], fi)
    return t + 0.5 * c

face_order, edge_order = route_data_coarse(des, dfs, first_face, last_face, heuristic=heuristic)

print(face_order)

def route_data_fine(vs, es, v_coarse_fis, coarse_vs, coarse_es, coarse_fs, coarse_face_order, coarse_edge_order):
    vs = np.array(vs)
    coarse_vs = np.array(coarse_vs)

    def route_data_fine(include_vertices, first_vertex, last_vertex, heuristic):
        vertex_connections = [set() for _ in range(len(vs))]
        for (ei, (vi1, vi2)) in enumerate(es):
            if vi1 in include_vertices and vi2 in include_vertices:
                vertex_connections[vi1].add((vi2, ei))
                vertex_connections[vi2].add((vi1, ei))

        # Search over vertices with a heuristic
        # to generate a path that visits all of them

        to_visit = [([], [], first_vertex)]

        heuristic_key = lambda s: heuristic(*s)

        while to_visit:
            (v_history, e_history, v) = to_visit.pop()
            # Check termination condition
            if v == last_vertex and len(v_history) + 1 == len(include_vertices):
                return v_history + [v], e_history

            # Enumerate possible next steps
            possible_next_steps = [(v_history + [v], e_history + [ei], nv) for nv, ei in vertex_connections[v] if nv not in v_history]
            # Sort possible next steps according to heuristic
            possible_next_steps = sorted(possible_next_steps, key=heuristic_key)
            to_visit.extend(possible_next_steps)

        assert False, "Search did not find any paths"

    def route_one_coarse_face(coarse_fi):
        include_vertices = [vi for vi, v_coarse_fi in enumerate(v_coarse_fis) if v_coarse_fi == coarse_fi]

        first_vertex = None
        last_vertex = None

        # Trivial case: there is only one LED which is both the first and last vertex
        if len(face_order) == 1:
            first_vertex = 0
            last_vertex = 0

        # Pick first and last based on proximity to coarse face input/output
        position_in_order = face_order.index(coarse_fi)
        if first_vertex is None:
            input_ei = edge_order[position_in_order]
            input_edge_pt = np.mean(coarse_vs[coarse_es[input_ei]], axis=0)

            first_vertex = min(include_vertices, key=lambda vi: np.linalg.norm(input_edge_pt - vs[vi]))

        if last_vertex is None:
            output_ei = edge_order[position_in_order + 1]
            output_edge_pt = np.mean(coarse_vs[coarse_es[output_ei]], axis=0)

            last_vertex = min(set(include_vertices) - {first_vertex}, key=lambda vi: np.linalg.norm(output_edge_pt - vs[vi]))

        ## If either input or output was missing, set the other one as far away as possible
        #if first_vertex is None and last_vertex is not None:
        #    first_vertex = max(set(include_vertices) - {last_vertex}, key=lambda vi: np.linalg.norm(vs[last_vertex] - vs[vi]))
        #if last_vertex is None and first_vertex is not None:
        #    last_vertex = max(set(include_vertices) - {first_vertex}, key=lambda vi: np.linalg.norm(vs[first_vertex] - vs[vi]))

        assert first_vertex is not None
        assert last_vertex is not None

        last_vertex_pos = np.array(vs[last_vertex])

        def heuristic(v_history, e_history, v):
            # Farther from the last vertex is better
            return np.linalg.norm(np.array(vs[v]) - last_vertex_pos)

        return route_data_fine(include_vertices, first_vertex, last_vertex, heuristic)

    return [route_one_coarse_face(coarse_fi) for coarse_fi in range(len(coarse_fs))]

face_fine_routing = route_data_fine(vs, es, v_fis, dvs, des, dfs, face_order, edge_order)

# Come up with a transformation matrix for each LED
def led_placement(vs, face_fine_routing, v_fis, coarse_vs, coarse_es, coarse_fs, coarse_face_normals, coarse_face_order, coarse_edge_order, footprint_data_direction_vector):
    coarse_vs = np.array(coarse_vs)
    def place_one_led(vi):
        # Find center of face that this LED lies on
        coarse_fi = v_fis[vi]
        center = np.mean(coarse_vs[coarse_fs[coarse_fi]], axis=0)

        m = np.eye(4)

        # Translation = LED position
        t = vs[vi]
        # Z = normal to face
        z = coarse_face_normals[coarse_fi]
        # First guess at Y = away from center
        y_options = [t - center, np.array([1, 0, 0]), np.array([0, 1, 0])]
        for y in y_options:
            if np.linalg.norm(np.cross(y, z)) > 1e-5:
                break
        else:
            assert False, "Found no good Y basis direction"
        # X = Y cross Z
        x = np.cross(y, z)
        x /= np.linalg.norm(x)
        # Fixed Y = Z cross X
        y = np.cross(z, x)
        y /= np.linalg.norm(y)

        m[0:3, 0] = x
        m[0:3, 1] = y
        m[0:3, 2] = z
        m[0:3, 3] = t

        # Flip increments of 90 degrees if it fits routing better
        (fine_routing, _) = face_fine_routing[coarse_fi]
        i = fine_routing.index(vi)
        prev_pt = vs[fine_routing[i - 1]] if i > 0 else None
        next_pt = vs[fine_routing[i + 1]] if i < len(fine_routing) - 1 else None

        if prev_pt is None:
            # Route from center of input edge
            coarse_ei = coarse_edge_order[coarse_face_order.index(coarse_fi)]
            prev_pt = np.mean(coarse_vs[coarse_es[coarse_ei]], axis=0)

        if next_pt is None:
            # Route to center of output edge
            coarse_ei = coarse_edge_order[coarse_face_order.index(coarse_fi) + 1]
            next_pt = np.mean(coarse_vs[coarse_es[coarse_ei]], axis=0)

        routing_vector = next_pt - prev_pt

        rot_90 = np.array([
            [0, 1, 0, 0],
            [-1, 0, 0, 0],
            [0, 0, 1, 0],
            [0, 0, 0, 1],
        ])
        possible_rotations = [
            np.eye(4),
            rot_90,
            rot_90 @ rot_90,
            rot_90 @ rot_90 @ rot_90,
        ]

        possible_orientations = [m @ r for r in possible_rotations]
        def aligned_with_routing(m):
            vec = (m @ np.array([footprint_data_direction_vector[0], footprint_data_direction_vector[1], 0, 0]))[0:3]
            # Return how aligned the data direction vector of the footprint is with the data line routing
            return np.dot(vec, routing_vector)

        final_orientation = max(possible_orientations, key=aligned_with_routing)

        return final_orientation

    return [place_one_led(vi) for vi in range(len(vs))]

led_matrices = led_placement(vs, face_fine_routing, v_fis, dvs, des, dfs, face_normals, face_order, edge_order, footprint_data_direction_vector=[1, 1])

# Draw the result

#for (dvi1, dvi2) in des:
#    ax.plot(
#        [dvs[dvi1][0], dvs[dvi2][0]],
#        [dvs[dvi1][1], dvs[dvi2][1]],
#        [dvs[dvi1][2], dvs[dvi2][2]],
#    )
#
#path = np.array([face_ds[fi] * face_normals[fi] for fi in face_order])
#ax.plot(path[:, 0], path[:, 1], path[:, 2])
#
#for (vertex_order, _) in face_fine_routing:
#    path = np.array([vs[vi] for vi in vertex_order])
#    ax.plot(path[:, 0], path[:, 1], path[:, 2])
#
#plt.show()
#assert False

# Unfold the orb

def unfold_matrix(fn1, fd1, fn2, fd2):
    # To get the matrix that "un-does" the fold between f1 and f2,
    # we will first generate a basis
    # whose origin lies on the edge between f1 and f2,
    # and whose Z axis is the normal of f1,
    # and whose Y axis is along the edge connecting f1 and f2.

    # First we find the intersection line in Plucker coordinates
    d = np.cross(fn1, fn2)
    norm_factor = 1 / np.linalg.norm(d)
    d *= norm_factor
    m = fd2 * fn1 - fd1 * fn2
    m *= norm_factor

    b1 = np.eye(4)

    # Take an arbitrary point on the line to serve as the b1 translation component
    b1[0:3, 3] = np.cross(d, m)
    b1[0:3, 2] = fn1
    b1[0:3, 1] = d
    b1[0:3, 0] = np.cross(d, fn1)

    # Now, build a matrix to perform the unfold in basis b1
    # (which is now just a rotation along the Y axis)
    sin_theta = -np.linalg.norm(np.cross(fn1, fn2))
    cos_theta = np.dot(fn1, fn2)
    r = np.eye(4)
    r[0,0] = cos_theta
    r[0,2] = sin_theta
    r[2,0] = -sin_theta
    r[2,2] = cos_theta

    # Return R in the basis of b1
    return b1 @ r @ np.linalg.inv(b1)


def unfold(es, fs, first_face, include_faces):
    face_connections = [set() for _ in range(len(fs))]
    for (ei, (vi1, vi2)) in enumerate(es):
        # Find faces that contain this edge
        faces = set(fi for fi in range(len(fs))
            if vi1 in fs[fi] and vi2 in fs[fi])

        # Connect them to each other
        for fi in faces:
            face_connections[fi] |= {(fi, ei) for fi in faces - {fi}}

    # Breadth-first search of faces
    # to generate a spanning tree
    # and compute unfold matrices along the way

    strategy = "bfs"
    unvisited = set(include_faces)
    matrices = [np.eye(4) for _ in range(len(fs))]
    shared_edges = set()

    to_visit = [(None, first_face, None)]

    while to_visit:
        (f1, f2, ei) = to_visit.pop()
        if f2 in unvisited:
            if f1 is not None:
                matrices[f2] = matrices[f1] @ unfold_matrix(face_normals[f1], face_ds[f1], face_normals[f2], face_ds[f2])
                shared_edges.add(ei)
            unvisited.remove(f2)
            for nf, ei in face_connections[f2]:
                if strategy == "dfs":
                    to_visit.append((f2, nf, ei))
                elif strategy == "bfs":
                    to_visit.insert(0, (f2, nf, ei))
                else:
                    raise ValueError(f"Unknown strategy: {strategy}")

    assert not unvisited

    return matrices, shared_edges

# Split into multiple PCBs and unfold

def split_and_unfold(vs, es, fs, face_splits):
    vs = np.array(vs)

    unfolded_matrices = [None] * len(fs)
    shared_edges = set()
    root_faces = []

    flat_board_offset = [200, 0]
    offset_m = np.eye(4)
    offset_m[0:2, 3] = flat_board_offset
    cur_offset_m = np.eye(4)

    for include_faces in face_splits:

        # Pick first face by which is closest to the center of all included faces
        center_of_each_included_face = np.array([np.mean(vs[fs[fi]], axis=0) for fi in include_faces])
        center_of_all_included_faces = np.mean(center_of_each_included_face, axis=0)
        first_face = include_faces[np.argmin(np.linalg.norm(center_of_each_included_face - center_of_all_included_faces, axis=1))]

        partial_unfolded_matrices, partial_shared_edges = unfold(es, fs, first_face, include_faces)

        # For each separate board,
        # move the first face to the origin
        # and then offset it by some amount

        t = np.mean(vs[fs[first_face]], axis=0)
        z = t / np.linalg.norm(t)
        y_options = [np.array([0, 1, 0]), np.array([1, 0, 0])]
        for y in y_options:
            if np.linalg.norm(np.cross(y, z)) > 1e-5:
                break
        else:
            assert False, "Found no good Y basis direction"
        x = np.cross(y, z)
        x = x / np.linalg.norm(x)
        y = np.cross(z, x)
        y = y / np.linalg.norm(y)

        root_m = np.eye(4)
        root_m[0:3, 0] = x
        root_m[0:3, 1] = y
        root_m[0:3, 2] = z
        root_m[0:3, 3] = t
        root_m = np.linalg.inv(root_m)

        for (fi, m) in enumerate(partial_unfolded_matrices):
            if fi in include_faces:
                unfolded_matrices[fi] = cur_offset_m @ root_m @ m

        cur_offset_m = offset_m @ cur_offset_m

        shared_edges |= partial_shared_edges
        root_faces.append(first_face)

    return root_faces, unfolded_matrices, shared_edges

face_splits = [
    face_order[:len(face_order) // 2],
    face_order[len(face_order) // 2:],
]

root_faces, unfolded_matrices, shared_edges = split_and_unfold(dvs, des, dfs, face_splits)

# Designate each unused edge with a connector pads for + or -
def route_power(es, fs, edge_order, shared_edges):
    edge_labels = [None] * len(es)

    # See which edges are joined by the PCB
    for ei in shared_edges:
        assert edge_labels[ei] is None
        edge_labels[ei] = "shared"

    # See which edges already carry data
    for ei in edge_order:
        if edge_labels[ei] is None:
            edge_labels[ei] = "data"
        elif edge_labels[ei] == "shared":
            edge_labels[ei] = "shared,data"

    # Greedily assign + and - to the rest:
    # Find the least balanced of the least valence faces

    face_connections = [set() for _ in range(len(fs))]
    for (ei, (vi1, vi2)) in enumerate(es):
        # Find faces that contain this edge
        faces = set(fi for fi in range(len(fs))
            if vi1 in fs[fi] and vi2 in fs[fi])

        # Connect them to each other
        for fi in faces:
            face_connections[fi].add(ei)

    def face_valence_and_balance(fi):
        eis = face_connections[fi]
        valence = sum(edge_labels[ei] is None for ei in eis)
        pos = sum(edge_labels[ei] == "pos" for ei in eis)
        neg = sum(edge_labels[ei] == "neg" for ei in eis)
        return (valence, pos - neg)

    def edge_valence_and_balance(ei):
        assert edge_labels[ei] is None
        fis = [fi for (fi, eis) in enumerate(face_connections) if ei in eis]
        assert len(fis) == 2
        face_valence_and_balance_values = [face_valence_and_balance(fi) for fi in fis]
        valences, balances = zip(*face_valence_and_balance_values)
        assert min(valences) > 0 # At least this edge should be an option
        return (min(valences), max(balances, key=abs))

    while True:
        eis = [ei for (ei, label) in enumerate(edge_labels) if label is None]
        if not eis:
            break

        # Sort first by lowest valence, then by largest imbalance
        def heuristic_key(ei):
            (valence, balance) = edge_valence_and_balance(ei)
            return -valence + abs(balance)

        target_ei = max(eis, key=heuristic_key)
        (valence, balance) = edge_valence_and_balance(target_ei)
        if balance > 0:
            edge_labels[target_ei] = "neg"
        elif balance < 0:
            edge_labels[target_ei] = "pos"
        else:
            edge_labels[target_ei] = random.choice(("pos", "neg"))

    worst_balance = max((face_valence_and_balance(fi)[0] for fi in range(len(fs))), key=abs)

    return edge_labels, worst_balance

edge_labels, worst_balance = route_power(des, dfs, edge_order, shared_edges)

# Make sure power distribution is somewhat balanced
assert abs(worst_balance) < 2

# Draw flat pattern

def xf_for_face(fi):
    def xf(v):
        a = np.array([0., 0., 0., 1.])
        a[0:3] = v
        a = unfolded_matrices[fi] @ a
        a[2] = 0
        return a[0:3]

    return xf

#for fi in range(len(dfs)):
#    allow_vertices = [vi for vi in range(len(dvs)) if vi in dfs[fi]]
#
#    xf = xf_for_face(fi)
#
#    for (ei, (dvi1, dvi2)) in enumerate(des):
#        if ei not in shared_edges and dvi1 in allow_vertices and dvi2 in allow_vertices:
#            ax.plot(
#                *zip(xf(dvs[dvi1]), xf(dvs[dvi2])),
#                c="black",
#            )
#
#            txt, c = {
#                "pos": ("+", "red"),
#                "neg": ("-", "black"),
#            }.get(edge_labels[ei], ("", None))
#            if txt:
#                ax.text(*xf(0.5 * (dvs[dvi1] + dvs[dvi2])), s=txt, zdir=None, color=c)
#
#    # Draw LEDs
#    for vi in range(len(vs)):
#        if v_fis[vi] != fi:
#            continue
#
#        led_size = 2.5
#        pts = np.array([
#            [-1, -1, 0, 1],
#            [-1, 1, 0, 1],
#            #[1, 1, 0, 1],
#            [1, 0, 0, 1],
#            #[1,-1, 0, 1],
#            [-1, -1, 0, 1],
#            [-1, 1, 0, 1],
#            [1, 1, 0, 1],
#            [1,-1, 0, 1],
#            [-1, -1, 0, 1],
#        ]) * np.array([0.5 * led_size, 0.5 * led_size, 0.5 * led_size, 1])
#
#        pts = (led_matrices[vi] @ pts.T).T
#
#        ax.plot(
#            *zip(*(xf(pt[0:3]) for pt in pts)),
#            c="black",
#        )

def draw_routing(vs, es, fs, fine_vs, face_order, edge_order):
    vs = np.array(vs)

    input_edge_order = edge_order[:-1]
    output_edge_order = edge_order[1:]

    # Inputs
    for fi, ei in zip(face_order, input_edge_order):
        if ei is not None:
            edge_pt = np.mean(vs[es[ei]], axis=0)
            #face_pt = np.mean(vs[fs[fi]], axis=0)
            vertex_order, _ = face_fine_routing[fi]
            face_pt = fine_vs[vertex_order[0]]
            xf = xf_for_face(fi)
            ax.plot(*zip(xf(edge_pt), xf(face_pt)), color="green")

    # Outputs
    for fi, ei in zip(face_order, output_edge_order):
        if ei is not None:
            edge_pt = np.mean(vs[es[ei]], axis=0)
            #face_pt = np.mean(vs[fs[fi]], axis=0)
            vertex_order, _ = face_fine_routing[fi]
            face_pt = fine_vs[vertex_order[-1]]
            xf = xf_for_face(fi)
            ax.plot(*zip(xf(edge_pt), xf(face_pt)), color="red")

    # Fine routing
    for fi in face_order:
        vertex_order, _ = face_fine_routing[fi]
        xf = xf_for_face(fi)
        path = np.array([fine_vs[vi] for vi in vertex_order])
        ax.plot(*zip(*[xf(pt) for pt in path]), color="gray")

#draw_routing(dvs, des, dfs, vs, face_order, edge_order)
#plt.show()

def make_uuid():
    return str(uuid.uuid4())

def export_board_preamble():
    return """(kicad_pcb
    (version 20240108)
    (generator "pcbnew")
    (generator_version "8.0")
    (general
        (thickness 1.6)
        (legacy_teardrops no)
    )
    (paper "A4")
    (layers
        (0 "F.Cu" signal)
        (31 "B.Cu" signal)
        (32 "B.Adhes" user "B.Adhesive")
        (33 "F.Adhes" user "F.Adhesive")
        (34 "B.Paste" user)
        (35 "F.Paste" user)
        (36 "B.SilkS" user "B.Silkscreen")
        (37 "F.SilkS" user "F.Silkscreen")
        (38 "B.Mask" user)
        (39 "F.Mask" user)
        (40 "Dwgs.User" user "User.Drawings")
        (41 "Cmts.User" user "User.Comments")
        (42 "Eco1.User" user "User.Eco1")
        (43 "Eco2.User" user "User.Eco2")
        (44 "Edge.Cuts" user)
        (45 "Margin" user)
        (46 "B.CrtYd" user "B.Courtyard")
        (47 "F.CrtYd" user "F.Courtyard")
        (48 "B.Fab" user)
        (49 "F.Fab" user)
        (50 "User.1" user)
        (51 "User.2" user)
        (52 "User.3" user)
        (53 "User.4" user)
        (54 "User.5" user)
        (55 "User.6" user)
        (56 "User.7" user)
        (57 "User.8" user)
        (58 "User.9" user)
    )
    (setup
        (pad_to_mask_clearance 0)
        (allow_soldermask_bridges_in_footprints no)
        (pcbplotparams
            (layerselection 0x00010fc_ffffffff)
            (plot_on_all_layers_selection 0x0000000_00000000)
            (disableapertmacros no)
            (usegerberextensions no)
            (usegerberattributes yes)
            (usegerberadvancedattributes yes)
            (creategerberjobfile yes)
            (dashed_line_dash_ratio 12.000000)
            (dashed_line_gap_ratio 3.000000)
            (svgprecision 4)
            (plotframeref no)
            (viasonmask no)
            (mode 1)
            (useauxorigin no)
            (hpglpennumber 1)
            (hpglpenspeed 20)
            (hpglpendiameter 15.000000)
            (pdf_front_fp_property_popups yes)
            (pdf_back_fp_property_popups yes)
            (dxfpolygonmode yes)
            (dxfimperialunits yes)
            (dxfusepcbnewfont yes)
            (psnegative no)
            (psa4output no)
            (plotreference yes)
            (plotvalue yes)
            (plotfptext yes)
            (plotinvisibletext no)
            (sketchpadsonfab no)
            (subtractmaskfromsilk no)
            (outputformat 1)
            (mirror no)
            (drillshape 1)
            (scaleselection 1)
            (outputdirectory "")
        )
    )
"""

def generate_board_nets(vs, es, fs, fine_vs, face_order, edge_order):
    vs = np.array(vs)
    input_edge_order = edge_order[:-1]
    output_edge_order = edge_order[1:]

    nets = []

    # Global
    nets.append("")
    nets.append("GND")
    nets.append("VCC")

    # Inputs
    for fi, ei in zip(face_order, input_edge_order):
        if ei is not None:
            edge_pad = f"PAD{ei}-{fi}"
            vertex_order, _ = face_fine_routing[fi]
            led = f"LED{vertex_order[0]}"
            nets.append(f"({edge_pad})({led}-DI)")

    # Outputs
    for fi, ei in zip(face_order, output_edge_order):
        if ei is not None:
            edge_pad = f"PAD{ei}-{fi}"
            #face_pt = np.mean(vs[fs[fi]], axis=0)
            vertex_order, _ = face_fine_routing[fi]
            led = f"LED{vertex_order[-1]}"
            nets.append(f"({led}-DO)({edge_pad})")

    # Fine routing
    for fi in face_order:
        vertex_order, _ = face_fine_routing[fi]
        for (vi1, vi2) in zip(vertex_order[:-1], vertex_order[1:]):
            led1 = f"LED{vi1}"
            led2 = f"LED{vi2}"
            nets.append(f"({led1}-DO)({led2}-DI)")

    # Assign numbers
    nets = {net: f'{i} "{net}"' for i, net in enumerate(nets)}

    return nets

def export_board_nets(nets):
    export = ""
    for net_name in nets.values():
        export += f"""    (net {net_name})
"""
    return export

def net_name_for_pad(nets, pad):
    for net, net_name in nets.items():
        if f"({pad})" in net:
            return net_name

def export_board_outline(vs, es, fs, nets, corner_circles=True):
    # Draw lines on the Edge.Cuts layer
    # in the shape of the boards

    # Convert flattened 3D lines into closed 2D polygons

    # First, determine the topology
    flat_edges_points = []

    for fi in range(len(fs)):
        allow_vertices = [vi for vi in range(len(vs)) if vi in fs[fi]]

        xf = xf_for_face(fi)

        for (ei, (vi1, vi2)) in enumerate(es):
            if ei not in shared_edges and vi1 in allow_vertices and vi2 in allow_vertices:
                start = xf(vs[vi1])[0:2] * KICAD_FLIP
                end = xf(vs[vi2])[0:2] * KICAD_FLIP
                flat_edges_points.append((start, end))

    flat_vertices = []
    flat_edges = []

    for (fv1, fv2) in flat_edges_points:
        eis = []
        for fv in (fv1, fv2): 
            for (i, test_v) in enumerate(flat_vertices):
                if np.linalg.norm(test_v - fv) < 1e-5:
                    fvi = i
                    break # Already in list
            else:
                fvi = len(flat_vertices)
                flat_vertices.append(fv)
            eis.append(fvi)
        flat_edges.append(tuple(eis))

    # Now, walk each polygon to get connectivity and orient each edge correctly
    vertices_to_visit = set(range(len(flat_vertices)))
    polygons = []
    while vertices_to_visit:
        first_vertex = next(iter(vertices_to_visit))
        cur_vertex = first_vertex
        polygon = []
        while True:
            possible_next_vertices = []
            for vi1, vi2 in flat_edges:
                if vi1 == cur_vertex and vi2 in vertices_to_visit:
                    possible_next_vertices.append(vi2)
                elif vi2 == cur_vertex and vi1 in vertices_to_visit:
                    possible_next_vertices.append(vi1)
            if not possible_next_vertices:
                assert False, "No outgoing edge found"

            # Avoid going back to the start if there's a second option
            if len(possible_next_vertices) > 1 and first_vertex in possible_next_vertices:
                possible_next_vertices.remove(first_vertex)

            next_vertex = possible_next_vertices.pop()

            vertices_to_visit.remove(next_vertex)
            polygon.append(next_vertex)
            if next_vertex == first_vertex:
                break
            cur_vertex = next_vertex

        # See if the polygon is wound forwards or backwards
        # by measuring its area (negative area = backwards)
        area = 0
        for (vi1, vi2) in zip(polygon, polygon[1:] + [polygon[0]]):
            (v1x, v1y) = flat_vertices[vi1]
            (v2x, v2y) = flat_vertices[vi2]
            area += (v2y - v1y) * 0.5 * (v1x + v2x)

        if area < 0:
            polygon = list(reversed(polygon))

        polygons.append(polygon) 

    export = ""

    if corner_circles:
        angular_offset = np.asin(offset_dist / circle_r)
        for polygon in polygons:
            for (vi1, vi2, vi3) in zip([polygon[-1]] + polygon[:-1], polygon, polygon[1:] + [polygon[0]]):
                circle_center = flat_vertices[vi2]
                circle_start_vector = flat_vertices[vi1] - flat_vertices[vi2]
                circle_start_angle = np.atan2(circle_start_vector[1], circle_start_vector[0]) + angular_offset
                circle_end_vector = flat_vertices[vi3] - flat_vertices[vi2]
                circle_end_angle = np.atan2(circle_end_vector[1], circle_end_vector[0]) - angular_offset
                circle_swept_angle = (((circle_start_angle - circle_end_angle) % (2*np.pi)) + (2*np.pi)) % (2*np.pi)
                circle_mid_angle = circle_end_angle + 0.5 * circle_swept_angle

                circle_start_pt = circle_center + circle_r * np.array([np.cos(circle_start_angle), np.sin(circle_start_angle)])
                circle_end_pt = circle_center + circle_r * np.array([np.cos(circle_end_angle), np.sin(circle_end_angle)])
                circle_mid_pt = circle_center + circle_r * np.array([np.cos(circle_mid_angle), np.sin(circle_mid_angle)])

                next_circle_center = flat_vertices[vi3]
                next_circle_start_vector = flat_vertices[vi2] - flat_vertices[vi3]
                next_circle_start_angle = np.atan2(next_circle_start_vector[1], next_circle_start_vector[0]) + angular_offset
                next_circle_start_pt = next_circle_center + circle_r * np.array([np.cos(next_circle_start_angle), np.sin(next_circle_start_angle)])

                export += f"""        (gr_arc
                (start {circle_start_pt[0]:.3f} {circle_start_pt[1]:.3f})
                (mid {circle_mid_pt[0]:.3f} {circle_mid_pt[1]:.3f})
                (end {circle_end_pt[0]:.3f} {circle_end_pt[1]:.3f})
                (stroke
                    (width 0.05)
                    (type default)
                )
                (layer "Edge.Cuts")
                (uuid "{make_uuid()}")
            )
            (gr_line
                (start {circle_end_pt[0]:.3f} {circle_end_pt[1]:.3f})
                (end {next_circle_start_pt[0]:.3f} {next_circle_start_pt[1]:.3f})
                (stroke
                    (width 0.05)
                    (type default)
                )
                (layer "Edge.Cuts")
                (uuid "{make_uuid()}")
            )
"""
    else:
        def offset_v(vi_prev, vi, vi_next):
            rot90 = np.array([[0, 1], [-1, 0]])

            vp = np.array(flat_vertices[vi_prev])
            v = np.array(flat_vertices[vi])
            vn = np.array(flat_vertices[vi_next])

            offset_p = rot90 @ (v - vp)
            offset_p = offset_dist * offset_p / np.linalg.norm(offset_p)
            offset_n = rot90 @ (vn - v)
            offset_n = offset_dist * offset_n / np.linalg.norm(offset_n)

            def line_through(pt1, pt2):
                # Line through 2 points represented in homogeneous line coordinates
                n = rot90 @ (pt2 - pt1)
                n = n / np.linalg.norm(n)
                d = np.dot(pt1, n)
                l = np.array(n.tolist() + [-d])
                return l

            lp = line_through(vp + offset_p, v + offset_p)
            ln = line_through(v + offset_n, vn + offset_n)

            # Find the intersection of the two offset lines
            pt = np.cross(lp, ln)
            pt = pt[0:2] / pt[2]

            return pt

        offset_flat_vertices = [None] * len(flat_vertices)
        for polygon in polygons:
            for (vi_prev, vi, vi_next) in zip([polygon[-1]] + polygon[:-1], polygon, polygon[1:] + [polygon[0]]):
                assert offset_flat_vertices[vi] is None
                offset_flat_vertices[vi] = offset_v(vi_prev, vi, vi_next)

            for (vi1, vi2) in zip(polygon, polygon[1:] + [polygon[0]]):
                start = offset_flat_vertices[vi1]
                end = offset_flat_vertices[vi2]

                export += f"""            (gr_line
                (start {start[0]:.3f} {start[1]:.3f})
                (end {end[0]:.3f} {end[1]:.3f})
                (stroke
                    (width 0.05)
                    (type default)
                )
                (layer "Edge.Cuts")
                (uuid "{make_uuid()}")
            )
"""


    # Add filled zones
    (gnd_num, gnd_name) = nets["GND"].split(" ")
    (vcc_num, vcc_name) = nets["VCC"].split(" ")

    for polygon in polygons:
        vs_in_poly = np.array(flat_vertices)[polygon]
        (xmin, ymin) = np.min(vs_in_poly, axis=0)
        (xmax, ymax) = np.max(vs_in_poly, axis=0)

        export += f"""    (zone
        (net {vcc_num})
        (net_name {vcc_name})
        (layer "F.Cu")
        (uuid "07f8a733-4d93-41dd-8ef6-34681b09ab16")
        (hatch edge 0.5)
        (connect_pads
            (clearance 0.2)
        )
        (min_thickness 0.2)
        (filled_areas_thickness no)
        (fill
            (thermal_gap 0.3)
            (thermal_bridge_width 0.2)
        )
        (polygon
            (pts
                (xy {xmin} {ymin}) (xy {xmax} {ymin}) (xy {xmax} {ymax}) (xy {xmin} {ymax})
            )
        )
    )
    (zone
        (net {gnd_num})
        (net_name {gnd_name})
        (layer "B.Cu")
        (uuid "07f8a733-4d93-41dd-8ef6-34681b09ab16")
        (hatch edge 0.5)
        (connect_pads
            (clearance 0.2)
        )
        (min_thickness 0.2)
        (filled_areas_thickness no)
        (fill
            (thermal_gap 0.3)
            (thermal_bridge_width 0.2)
        )
        (polygon
            (pts
                (xy {xmin} {ymin}) (xy {xmax} {ymin}) (xy {xmax} {ymax}) (xy {xmin} {ymax})
            )
        )
    )
"""

    return export

def export_board_folds(vs, es, fs):
    # Draw lines on the F.SilkS layer
    # and B.SilkS layer
    # indicating folds

    export = ""

    remaining_shared_edges = set(shared_edges)

    for fi in range(len(fs)):
        allow_vertices = [vi for vi in range(len(vs)) if vi in fs[fi]]

        xf = xf_for_face(fi)

        for (ei, (vi1, vi2)) in enumerate(es):
            if ei in remaining_shared_edges and vi1 in allow_vertices and vi2 in allow_vertices:
                remaining_shared_edges.remove(ei)

                start = xf(vs[vi1])[0:2] * KICAD_FLIP
                end = xf(vs[vi2])[0:2] * KICAD_FLIP

                tangent = end - start
                tangent = circle_r * tangent / np.linalg.norm(tangent)

                # Shrink to avoid circle edge cuts
                line_start = start + tangent
                line_end = end - tangent

                width = 0.4 # 0.2 clearance on both sides

                normal = np.array([[0, -1], [1, 0]]) @ (line_end - line_start)
                normal = 0.5 * width * normal / np.linalg.norm(normal)

                rect_1 = line_start - normal
                rect_2 = line_end - normal
                rect_3 = line_end + normal
                rect_4 = line_start + normal

                export += f"""    (gr_line
        (start {line_start[0]:.3f} {line_start[1]:.3f})
        (end {line_end[0]:.3f} {line_end[1]:.3f})
        (stroke
            (width 0.12)
			(type dash)
        )
        (layer "F.SilkS")
        (uuid "{make_uuid()}")
    )
    (gr_line
        (start {line_start[0]:.3f} {line_start[1]:.3f})
        (end {line_end[0]:.3f} {line_end[1]:.3f})
        (stroke
            (width 0.12)
			(type dash)
        )
        (layer "B.SilkS")
        (uuid "{make_uuid()}")
    )
	(zone
		(net 0)
		(net_name "")
		(layers "F&B.Cu")
		(uuid "{make_uuid()}")
		(hatch edge 0.5)
		(connect_pads
			(clearance 0)
		)
		(min_thickness 0.25)
		(filled_areas_thickness no)
		(keepout
			(tracks not_allowed)
			(vias not_allowed)
			(pads not_allowed)
			(copperpour allowed)
			(footprints allowed)
		)
		(fill
			(thermal_gap 0.5)
			(thermal_bridge_width 0.5)
		)
		(polygon
			(pts
				(xy {rect_1[0]:.3f} {rect_1[1]:.3f})
				(xy {rect_2[0]:.3f} {rect_2[1]:.3f})
				(xy {rect_3[0]:.3f} {rect_3[1]:.3f})
				(xy {rect_4[0]:.3f} {rect_4[1]:.3f})
			)
		)
	)
"""

    return export

def export_one_footprint(footprint_file_content, m, ref, pad_nets, other_replacements=None):
    if other_replacements is None:
        other_replacements = {}

    pos = m[0:2, 3] * KICAD_FLIP
    xvec = (np.linalg.inv(m) @ np.array([1, 0, 0, 0]))[0:2] * KICAD_FLIP
    angle = np.rad2deg(np.atan2(xvec[1], xvec[0]))
    angle = ((angle % 360) + 360) % 360

    footprint_lines = footprint_file_content.split("\n")
    footprint_lines = [l.replace("\t", "    ") for l in footprint_lines]
    footprint_lines = ["    " + line for line in footprint_lines]
    footprint_lines.insert(1, f'        (uuid "{make_uuid()}")')
    footprint_lines.insert(2, f'        (at {pos[0]:.3f} {pos[1]:.3f})')

    # Write pad & text angles
    # Add angle=0 if angle is omitted
    footprint_lines = [
        re.sub(r'\(at ([^ ]+) ([^ ]+)\)', rf'(at \1 \2 0)', line)
        for line in footprint_lines
    ]

    # Add rotation to existing angle
    def adjust_angle(line):
        match = re.search(r'\(at ([^ ]+) ([^ ]+) ([^ ]+)\)', line)
        if not match:
            return line
        (x, y, orig_angle) = match.groups()
        line = line[:match.start()] + f"(at {x} {y} {float(orig_angle) + angle:.3f})" + line[match.end():]
        return line

    footprint_lines = [
        adjust_angle(line)
        for line in footprint_lines
    ]

    # Write reference
    footprint_lines = [
        re.sub(r'\(property "Reference" "([^"]*)"', rf'(property "Reference" "{ref}"', line)
        for line in footprint_lines
    ]

    # Write pad nets
    for i, line in enumerate(footprint_lines):
        match = re.search(r'\(pad "([^"]*)"', line)
        if match is not None:
            (pad,) = match.groups()
            net = pad_nets.get(pad)
            if net:
                footprint_lines[i] = line + f"\n            (net {net})"

    # We added lines in a hacky way, so re-split
    footprint_lines = "\n".join(footprint_lines).split("\n")

    # Perform other replacements
    for (search_for, replace_with) in other_replacements.items():
        footprint_lines = [
            line.replace(search_for, replace_with)
            for line in footprint_lines
        ]

    return "\n".join(footprint_lines)

def export_board_leds(coarse_vs, coarse_fs, unfolded_matrices, v_fis, led_matrices, nets, footprint_file, pad_functions):
    with open(footprint_file) as f:
        footprint_file_content = f.read()

    export = ""

    for coarse_fi in range(len(coarse_fs)):
        for vi in range(len(led_matrices)):
            if v_fis[vi] != coarse_fi:
                continue

            m = unfolded_matrices[coarse_fi] @ led_matrices[vi]

            ref = f"LED{vi}"

            def net_for_function(pad_function):
                if pad_function == "DI":
                    return net_name_for_pad(nets, f"{ref}-DI")
                if pad_function == "DO":
                    return net_name_for_pad(nets, f"{ref}-DO")
                return nets[pad_function]

            pad_nets = {pad: net_for_function(pad_function) for (pad, pad_function) in pad_functions.items()}

            export += export_one_footprint(footprint_file_content, m, ref=ref, pad_nets=pad_nets)

    return export

def export_board_seam_pads(vs, es, fs, fine_vs, unfolded_matrices, edge_labels, v_fis, face_order, edge_order, nets, footprint_file):
    with open(footprint_file) as f:
        footprint_file_content = f.read()

    export = ""

    for fi, f in enumerate(fs):
        xf = xf_for_face(fi)

        face_center = np.mean(vs[np.array(f)], axis=0)
        face_center = xf(face_center)

        prior_faces = face_order[:face_order.index(fi)]
        prior_leds_to_this_face = [fine_vi for fine_vi in range(len(fine_vs)) if v_fis[fine_vi] in prior_faces]
        leds_on_this_face = [fine_vi for fine_vi in range(len(fine_vs)) if v_fis[fine_vi] == fi]

        input_to_led = len(prior_leds_to_this_face)
        output_to_led = input_to_led + len(leds_on_this_face)

        for ei, (vi1, vi2) in enumerate(es):
            if vi1 not in fs[fi] or vi2 not in fs[fi]:
                continue

            v1 = xf(vs[vi1])
            v2 = xf(vs[vi2])

            # Build a basis centered on this edge
            t = 0.5 * (v1 + v2)
            z = np.array([0, 0, 1])
            y = v2 - v1

            # Edges are in arbitrary order, so flip if necessary
            if np.dot(np.cross(face_center - t, y), z) < 0:
                y = -y

            y = y / np.linalg.norm(y)
            x = np.cross(y, z)
            m = np.eye(4)
            m[0:3, 0] = x
            m[0:3, 1] = y
            m[0:3, 2] = z
            m[0:3, 3] = t

            ref = f"PAD{ei}-{fi}"

            # Figure out what net this pad is
            label = edge_labels[ei]
            pad_nets = {}
            desc = "NC"
            if "data" in label:
                pad_nets["1"] = net_name_for_pad(nets, ref)

                # Figure out if this is an input or output
                foi = face_order.index(fi)
                if edge_order[foi] == ei:
                    desc = f"↑{input_to_led}↑"
                elif edge_order[foi+1] == ei:
                    desc = f"↓{output_to_led}↓"
                # It's possible neither of these are true
                # if this is the start or end

            elif label == "pos":
                pad_nets["1"] = nets["VCC"]
                desc = "+"
            elif label == "neg":
                pad_nets["1"] = nets["GND"]
                desc = "-"
            # if label is "shared" then there is no net

            export += export_one_footprint(footprint_file_content, m, ref=ref, pad_nets=pad_nets, other_replacements={"${DESCRIPTION}": desc})

    return export


    # Inputs
    for fi, ei in zip(face_order, input_edge_order):
        if ei is not None:
            edge_pad = f"PAD{ei}-{fi}"
            vertex_order, _ = face_fine_routing[fi]
            led = f"LED{vertex_order[0]}"
            nets.append(f"({edge_pad})({led}-DI)")

    # Outputs
    for fi, ei in zip(face_order, output_edge_order):
        if ei is not None:
            edge_pad = f"PAD{ei}-{fi}"
            #face_pt = np.mean(vs[fs[fi]], axis=0)
            vertex_order, _ = face_fine_routing[fi]
            led = f"LED{vertex_order[-1]}"
            nets.append(f"({led}-DO)({edge_pad})")


def export_board_postamble():
    return """)
"""

def export_board(coarse_vs, coarse_es, coarse_fs, vs, face_order, edge_order, unfolded_matrices, v_fis, led_matrices, edge_labels, filename):
    nets = generate_board_nets(coarse_vs, coarse_es, coarse_fs, vs, face_order, edge_order)
    content = "".join([
        export_board_preamble(),
        export_board_nets(nets),
        export_board_outline(coarse_vs, coarse_es, coarse_fs, nets),
        export_board_folds(coarse_vs, coarse_es, coarse_fs),
        export_board_leds(coarse_vs, coarse_fs, unfolded_matrices, v_fis, led_matrices, nets,
            footprint_file="lib.pretty/LED_SK6805_EC10_1111.kicad_mod",
            pad_functions={"1": "GND", "2": "DI", "3": "VCC", "4": "DO"},
        ),
        export_board_seam_pads(coarse_vs, coarse_es, coarse_fs, vs, unfolded_matrices, edge_labels, v_fis, face_order, edge_order, nets,
            footprint_file="lib.pretty/flex_seam_pad_small.kicad_mod",
        ),
        export_board_postamble(),
    ])
    with open(filename, "w") as f:
        f.write(content)

#export_board(dvs, des, dfs, vs, face_order, edge_order, unfolded_matrices, v_fis, led_matrices, edge_labels, filename="kicad/orb/orb_generated.kicad_pcb")


def export_skeleton(vs, es, fs, filename):
    import solid
    import solid.utils

    vs = np.array(vs)

    vms = geo.vertex_matrices(vs)
    ems = geo.edge_matrices(es, vs)
    #fms = geo.face_matrices(fs, vs)

    def triangulate_face(f):
        # F is not in order, unfortunately. Lets put it in order.

        centroid = np.mean(vs[f], axis=0)
        z = centroid / np.linalg.norm(centroid)
        up = vs[f[0]] - centroid
        up = up / np.linalg.norm(up)
        vec = vs[f] - centroid
        vec = vec / np.linalg.norm(vec)
        sort_ixs = np.argsort(np.atan2(np.dot(np.cross(vec, up), z), np.dot(vec, up)))

        f = np.array(f)[sort_ixs]

        if len(f) == 5:
            return [
                [f[0], f[1], f[2]],
                [f[0], f[2], f[3]],
                [f[0], f[3], f[4]],
            ]
        elif len(f) == 6:
            return [
                [f[0], f[1], f[2]],
                [f[0], f[2], f[3]],
                [f[0], f[3], f[4]],
                [f[0], f[4], f[5]],
            ]
        else:   
            assert False, "Only pentagons & hexagons supported"

    def face_matrix(f):
        centroid = np.mean(vs[f], axis=0)
        z = centroid / np.linalg.norm(centroid)
        x = vs[f[0]] - centroid
        x = x / np.linalg.norm(x)
        y = np.cross(z, x)

        m = np.eye(4)
        m[0:3, 0] = x
        m[0:3, 1] = y
        m[0:3, 2] = z
        m[0:3, 3] = centroid
        return m

    # Create shell
    CLEARANCE = 0.2
    tfs = [tf for f in fs for tf in triangulate_face(f)]
    norm_vs = (1. / np.linalg.norm(vs, axis=1))[:, None] * vs
    outside = solid.polyhedron(vs - norm_vs * CLEARANCE, tfs)
    inside = solid.polyhedron(vs - norm_vs * 2, tfs)

    # Add cylinder for each vertex to act as a pin
    def pin_at_vertex(vm):
        return solid.multmatrix(vm)(solid.cylinder(r=0.5, h=2, center=True))

    vertex_pins = [pin_at_vertex(vm) for vm in vms]

    # Add a cylindrical cutout at each edge for soldering the tabs

    def cutout(m):
        return solid.multmatrix(m)(solid.cylinder(r=3, h=10, center=True, segments=24))

    edge_cutouts = [cutout(em @ np.diag([1., 1.3, 1., 1.])) for em in ems]
    face_cutouts = [cutout(face_matrix(f)) for f in fs]

    shape = solid.union()(solid.difference()(outside, solid.union()(inside, *edge_cutouts, *face_cutouts)), *vertex_pins)

    partial_tool = solid.translate([0, 0, 50])(solid.cube(100, center=True))
    partial_shape = solid.intersection()(shape, partial_tool)

    solid.scad_render_to_file(partial_shape, 'skeleton.scad')

export_skeleton(dvs, des, dfs, filename="skeleton.scad")
 
 
************************************************/
